
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/numpy/plot_isomorphic_graphs_numpy.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_numpy_plot_isomorphic_graphs_numpy.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_numpy_plot_isomorphic_graphs_numpy.py:


========================================
Introduction: Matching Isomorphic Graphs
========================================

This example is an introduction to ``pygmtools`` which shows how to match isomorphic graphs.
Isomorphic graphs mean graphs whose structures are identical, but the node correspondence is unknown.

.. GENERATED FROM PYTHON SOURCE LINES 10-16

.. code-block:: default


    # Author: Runzhong Wang <runzhong.wang@sjtu.edu.cn>
    #         Qi Liu <purewhite@sjtu.edu.cn>
    #
    # License: Mulan PSL v2 License








.. GENERATED FROM PYTHON SOURCE LINES 18-29

.. note::
    The following solvers support QAP formulation, and are included in this example:

    * :func:`~pygmtools.classic_solvers.rrwm` (classic solver)

    * :func:`~pygmtools.classic_solvers.ipfp` (classic solver)

    * :func:`~pygmtools.classic_solvers.sm` (classic solver)

    * :func:`~pygmtools.neural_solvers.ngm` (neural network solver)


.. GENERATED FROM PYTHON SOURCE LINES 29-37

.. code-block:: default

    import numpy as np # numpy backend
    import pygmtools as pygm
    import matplotlib.pyplot as plt # for plotting
    from matplotlib.patches import ConnectionPatch # for plotting matching result
    import networkx as nx # for plotting graphs
    pygm.BACKEND = 'numpy' # set default backend for pygmtools
    np.random.seed(1) # fix random seed








.. GENERATED FROM PYTHON SOURCE LINES 38-41

Generate two isomorphic graphs
------------------------------------


.. GENERATED FROM PYTHON SOURCE LINES 41-51

.. code-block:: default

    num_nodes = 10
    X_gt = np.zeros((num_nodes, num_nodes))
    X_gt[np.arange(0, num_nodes, dtype=np.int64), np.random.permutation(num_nodes)] = 1
    A1 = np.random.rand(num_nodes, num_nodes)
    A1 = (A1 + A1.T > 1.) * (A1 + A1.T) / 2
    np.fill_diagonal(A1, 0)
    A2 = np.matmul(np.matmul(X_gt.T, A1), X_gt)
    n1 = np.array([num_nodes])
    n2 = np.array([num_nodes])








.. GENERATED FROM PYTHON SOURCE LINES 52-55

Visualize the graphs
----------------------


.. GENERATED FROM PYTHON SOURCE LINES 55-67

.. code-block:: default

    plt.figure(figsize=(8, 4))
    G1 = nx.from_numpy_array(A1)
    G2 = nx.from_numpy_array(A2)
    pos1 = nx.spring_layout(G1)
    pos2 = nx.spring_layout(G2)
    plt.subplot(1, 2, 1)
    plt.title('Graph 1')
    nx.draw_networkx(G1, pos=pos1)
    plt.subplot(1, 2, 2)
    plt.title('Graph 2')
    nx.draw_networkx(G2, pos=pos2)




.. image-sg:: /auto_examples/numpy/images/sphx_glr_plot_isomorphic_graphs_numpy_001.png
   :alt: Graph 1, Graph 2
   :srcset: /auto_examples/numpy/images/sphx_glr_plot_isomorphic_graphs_numpy_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 68-82

These two graphs look dissimilar because they are not aligned. We then align these two graphs
by graph matching.

Build affinity matrix
----------------------
To match isomorphic graphs by graph matching, we follow the formulation of Quadratic Assignment Problem (QAP):

.. math::

    &\max_{\mathbf{X}} \ \texttt{vec}(\mathbf{X})^\top \mathbf{K} \texttt{vec}(\mathbf{X})\\
    s.t. \quad &\mathbf{X} \in \{0, 1\}^{n_1\times n_2}, \ \mathbf{X}\mathbf{1} = \mathbf{1}, \ \mathbf{X}^\top\mathbf{1} \leq \mathbf{1}

where the first step is to build the affinity matrix (:math:`\mathbf{K}`)


.. GENERATED FROM PYTHON SOURCE LINES 82-88

.. code-block:: default

    conn1, edge1 = pygm.utils.dense_to_sparse(A1)
    conn2, edge2 = pygm.utils.dense_to_sparse(A2)
    import functools
    gaussian_aff = functools.partial(pygm.utils.gaussian_aff_fn, sigma=.1) # set affinity function
    K = pygm.utils.build_aff_mat(None, edge1, conn1, None, edge2, conn2, n1, None, n2, None, edge_aff_fn=gaussian_aff)








.. GENERATED FROM PYTHON SOURCE LINES 89-95

Visualization of the affinity matrix. For graph matching problem with :math:`N` nodes, the affinity matrix
has :math:`N^2\times N^2` elements because there are :math:`N^2` edges in each graph.

.. note::
    The diagonal elements of the affinity matrix are empty because there is no node features in this example.


.. GENERATED FROM PYTHON SOURCE LINES 95-99

.. code-block:: default

    plt.figure(figsize=(4, 4))
    plt.title(f'Affinity Matrix (size: {K.shape[0]}$\\times${K.shape[1]})')
    plt.imshow(K, cmap='Blues')




.. image-sg:: /auto_examples/numpy/images/sphx_glr_plot_isomorphic_graphs_numpy_002.png
   :alt: Affinity Matrix (size: 100$\times$100)
   :srcset: /auto_examples/numpy/images/sphx_glr_plot_isomorphic_graphs_numpy_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.image.AxesImage object at 0x7f8fbbf5dd90>



.. GENERATED FROM PYTHON SOURCE LINES 100-104

Solve graph matching problem by RRWM solver
-------------------------------------------
See :func:`~pygmtools.classic_solvers.rrwm` for the API reference.


.. GENERATED FROM PYTHON SOURCE LINES 104-106

.. code-block:: default

    X = pygm.rrwm(K, n1, n2)








.. GENERATED FROM PYTHON SOURCE LINES 107-109

The output of RRWM is a soft matching matrix. Visualization:


.. GENERATED FROM PYTHON SOURCE LINES 109-117

.. code-block:: default

    plt.figure(figsize=(8, 4))
    plt.subplot(1, 2, 1)
    plt.title('RRWM Soft Matching Matrix')
    plt.imshow(X, cmap='Blues')
    plt.subplot(1, 2, 2)
    plt.title('Ground Truth Matching Matrix')
    plt.imshow(X_gt, cmap='Blues')




.. image-sg:: /auto_examples/numpy/images/sphx_glr_plot_isomorphic_graphs_numpy_003.png
   :alt: RRWM Soft Matching Matrix, Ground Truth Matching Matrix
   :srcset: /auto_examples/numpy/images/sphx_glr_plot_isomorphic_graphs_numpy_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.image.AxesImage object at 0x7f8fbbd048e0>



.. GENERATED FROM PYTHON SOURCE LINES 118-122

Get the discrete matching matrix
---------------------------------
Hungarian algorithm is then adopted to reach a discrete matching matrix


.. GENERATED FROM PYTHON SOURCE LINES 122-124

.. code-block:: default

    X = pygm.hungarian(X)








.. GENERATED FROM PYTHON SOURCE LINES 125-127

Visualization of the discrete matching matrix:


.. GENERATED FROM PYTHON SOURCE LINES 127-135

.. code-block:: default

    plt.figure(figsize=(8, 4))
    plt.subplot(1, 2, 1)
    plt.title(f'RRWM Matching Matrix (acc={(X * X_gt).sum()/ X_gt.sum():.2f})')
    plt.imshow(X, cmap='Blues')
    plt.subplot(1, 2, 2)
    plt.title('Ground Truth Matching Matrix')
    plt.imshow(X_gt, cmap='Blues')




.. image-sg:: /auto_examples/numpy/images/sphx_glr_plot_isomorphic_graphs_numpy_004.png
   :alt: RRWM Matching Matrix (acc=1.00), Ground Truth Matching Matrix
   :srcset: /auto_examples/numpy/images/sphx_glr_plot_isomorphic_graphs_numpy_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.image.AxesImage object at 0x7f8fbb87afd0>



.. GENERATED FROM PYTHON SOURCE LINES 136-140

Align the original graphs
--------------------------
Draw the matching (green lines for correct matching, red lines for wrong matching):


.. GENERATED FROM PYTHON SOURCE LINES 140-153

.. code-block:: default

    plt.figure(figsize=(8, 4))
    ax1 = plt.subplot(1, 2, 1)
    plt.title('Graph 1')
    nx.draw_networkx(G1, pos=pos1)
    ax2 = plt.subplot(1, 2, 2)
    plt.title('Graph 2')
    nx.draw_networkx(G2, pos=pos2)
    for i in range(num_nodes):
        j = np.argmax(X[i]).item()
        con = ConnectionPatch(xyA=pos1[i], xyB=pos2[j], coordsA="data", coordsB="data",
                              axesA=ax1, axesB=ax2, color="green" if X_gt[i, j] else "red")
        plt.gca().add_artist(con)




.. image-sg:: /auto_examples/numpy/images/sphx_glr_plot_isomorphic_graphs_numpy_005.png
   :alt: Graph 1, Graph 2
   :srcset: /auto_examples/numpy/images/sphx_glr_plot_isomorphic_graphs_numpy_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 154-156

Align the nodes:


.. GENERATED FROM PYTHON SOURCE LINES 156-172

.. code-block:: default

    align_A2 = np.matmul(np.matmul(X, A2), X.T)
    plt.figure(figsize=(8, 4))
    ax1 = plt.subplot(1, 2, 1)
    plt.title('Graph 1')
    nx.draw_networkx(G1, pos=pos1)
    ax2 = plt.subplot(1, 2, 2)
    plt.title('Aligned Graph 2')
    align_pos2 = {}
    for i in range(num_nodes):
        j = np.argmax(X[i]).item()
        align_pos2[j] = pos1[i]
        con = ConnectionPatch(xyA=pos1[i], xyB=align_pos2[j], coordsA="data", coordsB="data",
                              axesA=ax1, axesB=ax2, color="green" if X_gt[i, j] else "red")
        plt.gca().add_artist(con)
    nx.draw_networkx(G2, pos=align_pos2)




.. image-sg:: /auto_examples/numpy/images/sphx_glr_plot_isomorphic_graphs_numpy_006.png
   :alt: Graph 1, Aligned Graph 2
   :srcset: /auto_examples/numpy/images/sphx_glr_plot_isomorphic_graphs_numpy_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 173-180

Other solvers are also available
---------------------------------

Classic IPFP solver
^^^^^^^^^^^^^^^^^^^^^
See :func:`~pygmtools.classic_solvers.ipfp` for the API reference.


.. GENERATED FROM PYTHON SOURCE LINES 180-182

.. code-block:: default

    X = pygm.ipfp(K, n1, n2)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /Users/guoziao/Desktop/pygmtools-git/pygmtools/numpy_backend.py:304: RuntimeWarning: invalid value encountered in true_divide
      t0 = alpha / beta




.. GENERATED FROM PYTHON SOURCE LINES 183-185

Visualization of IPFP matching result:


.. GENERATED FROM PYTHON SOURCE LINES 185-193

.. code-block:: default

    plt.figure(figsize=(8, 4))
    plt.subplot(1, 2, 1)
    plt.title(f'IPFP Matching Matrix (acc={(X * X_gt).sum()/ X_gt.sum():.2f})')
    plt.imshow(X, cmap='Blues')
    plt.subplot(1, 2, 2)
    plt.title('Ground Truth Matching Matrix')
    plt.imshow(X_gt, cmap='Blues')




.. image-sg:: /auto_examples/numpy/images/sphx_glr_plot_isomorphic_graphs_numpy_007.png
   :alt: IPFP Matching Matrix (acc=1.00), Ground Truth Matching Matrix
   :srcset: /auto_examples/numpy/images/sphx_glr_plot_isomorphic_graphs_numpy_007.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.image.AxesImage object at 0x7f8fbb9126a0>



.. GENERATED FROM PYTHON SOURCE LINES 194-198

Classic SM solver
^^^^^^^^^^^^^^^^^^^^^
See :func:`~pygmtools.classic_solvers.sm` for the API reference.


.. GENERATED FROM PYTHON SOURCE LINES 198-201

.. code-block:: default

    X = pygm.sm(K, n1, n2)
    X = pygm.hungarian(X)








.. GENERATED FROM PYTHON SOURCE LINES 202-204

Visualization of SM matching result:


.. GENERATED FROM PYTHON SOURCE LINES 204-212

.. code-block:: default

    plt.figure(figsize=(8, 4))
    plt.subplot(1, 2, 1)
    plt.title(f'SM Matching Matrix (acc={(X * X_gt).sum()/ X_gt.sum():.2f})')
    plt.imshow(X, cmap='Blues')
    plt.subplot(1, 2, 2)
    plt.title('Ground Truth Matching Matrix')
    plt.imshow(X_gt, cmap='Blues')




.. image-sg:: /auto_examples/numpy/images/sphx_glr_plot_isomorphic_graphs_numpy_008.png
   :alt: SM Matching Matrix (acc=1.00), Ground Truth Matching Matrix
   :srcset: /auto_examples/numpy/images/sphx_glr_plot_isomorphic_graphs_numpy_008.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.image.AxesImage object at 0x7f8fbbf41d60>



.. GENERATED FROM PYTHON SOURCE LINES 213-217

NGM neural network solver
^^^^^^^^^^^^^^^^^^^^^^^^^
See :func:`~pygmtools.neural_solvers.ngm` for the API reference.


.. GENERATED FROM PYTHON SOURCE LINES 217-220

.. code-block:: default

    X = pygm.ngm(K, n1, n2, pretrain='voc')
    X = pygm.hungarian(X)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Downloading to /Users/guoziao/Library/Caches/pygmtools/ngm_voc_numpy.npy...

    Downloading to /Users/guoziao/Library/Caches/pygmtools/ngm_voc_numpy.npy...
    Warning: Network error. Retrying...
     HTTPSConnectionPool(host='drive.google.com', port=443): Max retries exceeded with url: /u/0/uc?export=download&confirm=Z-AR&id=1LY93fLCjH5vDcWsjZxGPmXmrYMF8HZIR (Caused by ProxyError('Cannot connect to proxy.', OSError(0, 'Error')))

    Downloading to /Users/guoziao/Library/Caches/pygmtools/ngm_voc_numpy.npy...

    Downloading to /Users/guoziao/Library/Caches/pygmtools/ngm_voc_numpy.npy...
    Warning: Network error. Retrying...
     HTTPSConnectionPool(host='doc-10-4c-docs.googleusercontent.com', port=443): Max retries exceeded with url: /docs/securesc/ha0ro937gcuc7l7deffksulhg5h7mbp1/4oelpku25cc7uqakv0so3e5qaahk12gj/1678173600000/11502893918615205786/*/1LY93fLCjH5vDcWsjZxGPmXmrYMF8HZIR?e=download&uuid=5950de61-0e48-4a5c-aa10-fa05d0a65945 (Caused by ProxyError('Cannot connect to proxy.', OSError(0, 'Error')))

    Downloading to /Users/guoziao/Library/Caches/pygmtools/ngm_voc_numpy.npy...

    Downloading to /Users/guoziao/Library/Caches/pygmtools/ngm_voc_numpy.npy...
    Warning: Network error. Retrying...
     HTTPSConnectionPool(host='drive.google.com', port=443): Max retries exceeded with url: /u/0/uc?export=download&confirm=Z-AR&id=1LY93fLCjH5vDcWsjZxGPmXmrYMF8HZIR (Caused by ProxyError('Cannot connect to proxy.', OSError(0, 'Error')))

    Downloading to /Users/guoziao/Library/Caches/pygmtools/ngm_voc_numpy.npy...

    Downloading to /Users/guoziao/Library/Caches/pygmtools/ngm_voc_numpy.npy...
    Warning: Network error. Retrying...
     HTTPSConnectionPool(host='doc-10-4c-docs.googleusercontent.com', port=443): Max retries exceeded with url: /docs/securesc/ha0ro937gcuc7l7deffksulhg5h7mbp1/4oelpku25cc7uqakv0so3e5qaahk12gj/1678173600000/11502893918615205786/*/1LY93fLCjH5vDcWsjZxGPmXmrYMF8HZIR?e=download&uuid=021d0f2e-5f7f-4d72-b6d7-25ea4bad4087 (Caused by ProxyError('Cannot connect to proxy.', OSError(0, 'Error')))

    Downloading to /Users/guoziao/Library/Caches/pygmtools/ngm_voc_numpy.npy...

    Downloading to /Users/guoziao/Library/Caches/pygmtools/ngm_voc_numpy.npy...
      0%|          | 0/14319 [00:00<?, ?it/s]    100%|##########| 14.0k/14.0k [00:00<00:00, 4.04MB/s]




.. GENERATED FROM PYTHON SOURCE LINES 221-223

Visualization of NGM matching result:


.. GENERATED FROM PYTHON SOURCE LINES 223-230

.. code-block:: default

    plt.figure(figsize=(8, 4))
    plt.subplot(1, 2, 1) 
    plt.title(f'NGM Matching Matrix (acc={(X * X_gt).sum()/ X_gt.sum():.2f})')
    plt.imshow(X, cmap='Blues')
    plt.subplot(1, 2, 2)
    plt.title('Ground Truth Matching Matrix')
    plt.imshow(X_gt, cmap='Blues')



.. image-sg:: /auto_examples/numpy/images/sphx_glr_plot_isomorphic_graphs_numpy_009.png
   :alt: NGM Matching Matrix (acc=1.00), Ground Truth Matching Matrix
   :srcset: /auto_examples/numpy/images/sphx_glr_plot_isomorphic_graphs_numpy_009.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.image.AxesImage object at 0x7f8fbbcf2130>




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  41.920 seconds)


.. _sphx_glr_download_auto_examples_numpy_plot_isomorphic_graphs_numpy.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_isomorphic_graphs_numpy.py <plot_isomorphic_graphs_numpy.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_isomorphic_graphs_numpy.ipynb <plot_isomorphic_graphs_numpy.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
