
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/7.image_matching_by_NN/plot_deep_image_matching_pytorch.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_7.image_matching_by_NN_plot_deep_image_matching_pytorch.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_7.image_matching_by_NN_plot_deep_image_matching_pytorch.py:


===================================================================================
PyTorch Backend Example: Matching Image Keypoints by Graph Matching Neural Networks
===================================================================================

This example shows how to match image keypoints by neural network-based graph matching solvers.
These graph matching solvers are designed to match two individual graphs. The matched images
can be further passed to tackle downstream tasks.

.. GENERATED FROM PYTHON SOURCE LINES 11-16

.. code-block:: default


    # Author: Runzhong Wang <runzhong.wang@sjtu.edu.cn>
    #
    # License: Mulan PSL v2 License








.. GENERATED FROM PYTHON SOURCE LINES 18-27

.. note::
    The following solvers are based on matching two individual graphs, and are included in this example:

    * :func:`~pygmtools.neural_solvers.pca_gm` (neural network solver)

    * :func:`~pygmtools.neural_solvers.ipca_gm` (neural network solver)

    * :func:`~pygmtools.neural_solvers.cie` (neural network solver)


.. GENERATED FROM PYTHON SOURCE LINES 27-40

.. code-block:: default

    import torch # pytorch backend
    import torchvision # CV models
    import pygmtools as pygm
    import matplotlib.pyplot as plt # for plotting
    from matplotlib.patches import ConnectionPatch # for plotting matching result
    import scipy.io as sio # for loading .mat file
    import scipy.spatial as spa # for Delaunay triangulation
    from sklearn.decomposition import PCA as PCAdimReduc
    import itertools
    import numpy as np
    from PIL import Image
    pygm.set_backend('pytorch') # set default backend for pygmtools








.. GENERATED FROM PYTHON SOURCE LINES 41-53

Predicting Matching by Graph Matching Neural Networks
------------------------------------------------------
In this section we show how to do predictions (inference) by graph matching neural networks.
Let's take PCA-GM (:func:`~pygmtools.neural_solvers.pca_gm`) as an example.

Load the images
^^^^^^^^^^^^^^^^
Images are from the Willow Object Class dataset (this dataset also available with the Benchmark of ``pygmtools``,
see :class:`~pygmtools.dataset.WillowObject`).

The images are resized to 256x256.


.. GENERATED FROM PYTHON SOURCE LINES 53-67

.. code-block:: default

    obj_resize = (256, 256)
    img1 = Image.open('../data/willow_duck_0001.png')
    img2 = Image.open('../data/willow_duck_0002.png')
    kpts1 = torch.tensor(sio.loadmat('../data/willow_duck_0001.mat')['pts_coord'])
    kpts2 = torch.tensor(sio.loadmat('../data/willow_duck_0002.mat')['pts_coord'])
    kpts1[0] = kpts1[0] * obj_resize[0] / img1.size[0]
    kpts1[1] = kpts1[1] * obj_resize[1] / img1.size[1]
    kpts2[0] = kpts2[0] * obj_resize[0] / img2.size[0]
    kpts2[1] = kpts2[1] * obj_resize[1] / img2.size[1]
    img1 = img1.resize(obj_resize, resample=Image.BILINEAR)
    img2 = img2.resize(obj_resize, resample=Image.BILINEAR)
    torch_img1 = torch.from_numpy(np.array(img1, dtype=np.float32) / 256).permute(2, 0, 1).unsqueeze(0) # shape: BxCxHxW
    torch_img2 = torch.from_numpy(np.array(img2, dtype=np.float32) / 256).permute(2, 0, 1).unsqueeze(0) # shape: BxCxHxW








.. GENERATED FROM PYTHON SOURCE LINES 68-70

Visualize the images and keypoints


.. GENERATED FROM PYTHON SOURCE LINES 70-85

.. code-block:: default

    def plot_image_with_graph(img, kpt, A=None):
        plt.imshow(img)
        plt.scatter(kpt[0], kpt[1], c='w', edgecolors='k')
        if A is not None:
            for idx in torch.nonzero(A, as_tuple=False):
                plt.plot((kpt[0, idx[0]], kpt[0, idx[1]]), (kpt[1, idx[0]], kpt[1, idx[1]]), 'k-')

    plt.figure(figsize=(8, 4))
    plt.subplot(1, 2, 1)
    plt.title('Image 1')
    plot_image_with_graph(img1, kpts1)
    plt.subplot(1, 2, 2)
    plt.title('Image 2')
    plot_image_with_graph(img2, kpts2)




.. image-sg:: /auto_examples/7.image_matching_by_NN/images/sphx_glr_plot_deep_image_matching_pytorch_001.png
   :alt: Image 1, Image 2
   :srcset: /auto_examples/7.image_matching_by_NN/images/sphx_glr_plot_deep_image_matching_pytorch_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 86-91

Build the graphs
^^^^^^^^^^^^^^^^^
Graph structures are built based on the geometric structure of the keypoint set. In this example,
we refer to `Delaunay triangulation <https://en.wikipedia.org/wiki/Delaunay_triangulation>`_.


.. GENERATED FROM PYTHON SOURCE LINES 91-102

.. code-block:: default

    def delaunay_triangulation(kpt):
        d = spa.Delaunay(kpt.numpy().transpose())
        A = torch.zeros(len(kpt[0]), len(kpt[0]))
        for simplex in d.simplices:
            for pair in itertools.permutations(simplex, 2):
                A[pair] = 1
        return A

    A1 = delaunay_triangulation(kpts1)
    A2 = delaunay_triangulation(kpts2)








.. GENERATED FROM PYTHON SOURCE LINES 103-105

Visualize the graphs


.. GENERATED FROM PYTHON SOURCE LINES 105-113

.. code-block:: default

    plt.figure(figsize=(8, 4))
    plt.subplot(1, 2, 1)
    plt.title('Image 1 with Graphs')
    plot_image_with_graph(img1, kpts1, A1)
    plt.subplot(1, 2, 2)
    plt.title('Image 2 with Graphs')
    plot_image_with_graph(img2, kpts2, A2)




.. image-sg:: /auto_examples/7.image_matching_by_NN/images/sphx_glr_plot_deep_image_matching_pytorch_002.png
   :alt: Image 1 with Graphs, Image 2 with Graphs
   :srcset: /auto_examples/7.image_matching_by_NN/images/sphx_glr_plot_deep_image_matching_pytorch_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 114-124

Extract node features via CNN
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Deep graph matching solvers can be fused with CNN feature extractors, to build an end-to-end learning pipeline.

In this example, let's adopt the deep graph solvers based on matching two individual graphs.
The image features are based on two intermediate layers from the VGG16 CNN model, following
existing deep graph matching papers (such as :func:`~pygmtools.neural_solvers.pca_gm`)

Let's firstly fetch and download the VGG16 model:


.. GENERATED FROM PYTHON SOURCE LINES 124-126

.. code-block:: default

    vgg16_cnn = torchvision.models.vgg16_bn(True)








.. GENERATED FROM PYTHON SOURCE LINES 127-129

List of layers of VGG16:


.. GENERATED FROM PYTHON SOURCE LINES 129-131

.. code-block:: default

    print(vgg16_cnn.features)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Sequential(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace=True)
      (6): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (7): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (8): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (9): ReLU(inplace=True)
      (10): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (11): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (12): ReLU(inplace=True)
      (13): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (14): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (15): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (16): ReLU(inplace=True)
      (17): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (18): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (19): ReLU(inplace=True)
      (20): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (21): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (22): ReLU(inplace=True)
      (23): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (24): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (25): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (26): ReLU(inplace=True)
      (27): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (28): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (29): ReLU(inplace=True)
      (30): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (31): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (32): ReLU(inplace=True)
      (33): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (34): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (35): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (36): ReLU(inplace=True)
      (37): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (38): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (39): ReLU(inplace=True)
      (40): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (41): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (42): ReLU(inplace=True)
      (43): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    )




.. GENERATED FROM PYTHON SOURCE LINES 132-135

Let's define the CNN feature extractor, which outputs the features of ``layer (30)`` and
``layer (37)``


.. GENERATED FROM PYTHON SOURCE LINES 135-147

.. code-block:: default

    class CNNNet(torch.nn.Module):
        def __init__(self, vgg16_module):
            super(CNNNet, self).__init__()
            # The naming of the layers follow ThinkMatch convention to load pretrained models.
            self.node_layers = torch.nn.Sequential(*[_ for _ in vgg16_module.features[:31]])
            self.edge_layers = torch.nn.Sequential(*[_ for _ in vgg16_module.features[31:38]])

        def forward(self, inp_img):
            feat_local = self.node_layers(inp_img)
            feat_global = self.edge_layers(feat_local)
            return feat_local, feat_global








.. GENERATED FROM PYTHON SOURCE LINES 148-151

Download pretrained CNN weights (from `ThinkMatch <https://github.com/Thinklab-SJTU/ThinkMatch>`_),
load the weights and then extract the CNN features


.. GENERATED FROM PYTHON SOURCE LINES 151-162

.. code-block:: default

    cnn = CNNNet(vgg16_cnn)
    path = pygm.utils.download('vgg16_pca_voc_pytorch.pt', 'https://drive.google.com/u/0/uc?export=download&confirm=Z-AR&id=1JnX3cSPvRYBSrDKVwByzp7CADgVCJCO_')
    if torch.cuda.is_available():
        map_location = torch.device('cuda:0')
    else:
        map_location = torch.device('cpu')
    cnn.load_state_dict(torch.load(path, map_location=map_location), strict=False)
    with torch.set_grad_enabled(False):
        feat1_local, feat1_global = cnn(torch_img1)
        feat2_local, feat2_global = cnn(torch_img2)








.. GENERATED FROM PYTHON SOURCE LINES 163-165

Normalize the features


.. GENERATED FROM PYTHON SOURCE LINES 165-174

.. code-block:: default

    def l2norm(node_feat):
        return torch.nn.functional.local_response_norm(
            node_feat, node_feat.shape[1] * 2, alpha=node_feat.shape[1] * 2, beta=0.5, k=0)

    feat1_local = l2norm(feat1_local)
    feat1_global = l2norm(feat1_global)
    feat2_local = l2norm(feat2_local)
    feat2_global = l2norm(feat2_global)








.. GENERATED FROM PYTHON SOURCE LINES 175-177

Up-sample the features to the original image size and concatenate


.. GENERATED FROM PYTHON SOURCE LINES 177-185

.. code-block:: default

    feat1_local_upsample = torch.nn.functional.interpolate(feat1_local, (obj_resize[1], obj_resize[0]), mode='bilinear')
    feat1_global_upsample = torch.nn.functional.interpolate(feat1_global, (obj_resize[1], obj_resize[0]), mode='bilinear')
    feat2_local_upsample = torch.nn.functional.interpolate(feat2_local, (obj_resize[1], obj_resize[0]), mode='bilinear')
    feat2_global_upsample = torch.nn.functional.interpolate(feat2_global, (obj_resize[1], obj_resize[0]), mode='bilinear')
    feat1_upsample = torch.cat((feat1_local_upsample, feat1_global_upsample), dim=1)
    feat2_upsample = torch.cat((feat2_local_upsample, feat2_global_upsample), dim=1)
    num_features = feat1_upsample.shape[1]








.. GENERATED FROM PYTHON SOURCE LINES 186-188

Visualize the extracted CNN feature (dimensionality reduction via principle component analysis)


.. GENERATED FROM PYTHON SOURCE LINES 188-209

.. code-block:: default

    pca_dim_reduc = PCAdimReduc(n_components=3, whiten=True)
    feat_dim_reduc = pca_dim_reduc.fit_transform(
        np.concatenate((
            feat1_upsample.permute(0, 2, 3, 1).reshape(-1, num_features).numpy(),
            feat2_upsample.permute(0, 2, 3, 1).reshape(-1, num_features).numpy()
        ), axis=0)
    )
    feat_dim_reduc = feat_dim_reduc / np.max(np.abs(feat_dim_reduc), axis=0, keepdims=True) / 2 + 0.5
    feat1_dim_reduc = feat_dim_reduc[:obj_resize[0] * obj_resize[1], :]
    feat2_dim_reduc = feat_dim_reduc[obj_resize[0] * obj_resize[1]:, :]

    plt.figure(figsize=(8, 4))
    plt.subplot(1, 2, 1)
    plt.title('Image 1 with CNN features')
    plot_image_with_graph(img1, kpts1, A1)
    plt.imshow(feat1_dim_reduc.reshape(obj_resize[1], obj_resize[0], 3), alpha=0.5)
    plt.subplot(1, 2, 2)
    plt.title('Image 2 with CNN features')
    plot_image_with_graph(img2, kpts2, A2)
    plt.imshow(feat2_dim_reduc.reshape(obj_resize[1], obj_resize[0], 3), alpha=0.5)




.. image-sg:: /auto_examples/7.image_matching_by_NN/images/sphx_glr_plot_deep_image_matching_pytorch_003.png
   :alt: Image 1 with CNN features, Image 2 with CNN features
   :srcset: /auto_examples/7.image_matching_by_NN/images/sphx_glr_plot_deep_image_matching_pytorch_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.image.AxesImage object at 0x7fe196ff8b50>



.. GENERATED FROM PYTHON SOURCE LINES 210-212

Extract node features by nearest interpolation


.. GENERATED FROM PYTHON SOURCE LINES 212-217

.. code-block:: default

    rounded_kpts1 = torch.round(kpts1).to(dtype=torch.long)
    rounded_kpts2 = torch.round(kpts2).to(dtype=torch.long)
    node1 = feat1_upsample[0, :, rounded_kpts1[1], rounded_kpts1[0]].t() # shape: NxC
    node2 = feat2_upsample[0, :, rounded_kpts2[1], rounded_kpts2[0]].t() # shape: NxC








.. GENERATED FROM PYTHON SOURCE LINES 218-222

Call PCA-GM matching model
^^^^^^^^^^^^^^^^^^^^^^^^^^
See :func:`~pygmtools.neural_solvers.pca_gm` for the API reference.


.. GENERATED FROM PYTHON SOURCE LINES 222-237

.. code-block:: default

    X = pygm.pca_gm(node1, node2, A1, A2, pretrain='voc')
    X = pygm.hungarian(X)

    plt.figure(figsize=(8, 4))
    plt.suptitle('Image Matching Result by PCA-GM')
    ax1 = plt.subplot(1, 2, 1)
    plot_image_with_graph(img1, kpts1, A1)
    ax2 = plt.subplot(1, 2, 2)
    plot_image_with_graph(img2, kpts2, A2)
    for i in range(X.shape[0]):
        j = torch.argmax(X[i]).item()
        con = ConnectionPatch(xyA=kpts1[:, i], xyB=kpts2[:, j], coordsA="data", coordsB="data",
                              axesA=ax1, axesB=ax2, color="red" if i != j else "green")
        plt.gca().add_artist(con)




.. image-sg:: /auto_examples/7.image_matching_by_NN/images/sphx_glr_plot_deep_image_matching_pytorch_004.png
   :alt: Image Matching Result by PCA-GM
   :srcset: /auto_examples/7.image_matching_by_NN/images/sphx_glr_plot_deep_image_matching_pytorch_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 238-247

Matching images with other neural networks
-------------------------------------------
The above pipeline also works for other deep graph matching networks. Here we give examples of
:func:`~pygmtoools.neural_solvers.ipca_gm` and :func:`~pygmtoools.neural_solvers.cie`.

Matching by IPCA-GM model
^^^^^^^^^^^^^^^^^^^^^^^^^
See :func:`~pygmtools.neural_solvers.ipca_gm` for the API reference.


.. GENERATED FROM PYTHON SOURCE LINES 247-254

.. code-block:: default

    path = pygm.utils.download('vgg16_ipca_voc_pytorch.pt', 'https://drive.google.com/u/0/uc?export=download&confirm=Z-AR&id=1TGrbSQRmUkClH3Alz2OCwqjl8r8gf5yI')
    cnn.load_state_dict(torch.load(path, map_location=map_location), strict=False)

    with torch.set_grad_enabled(False):
        feat1_local, feat1_global = cnn(torch_img1)
        feat2_local, feat2_global = cnn(torch_img2)








.. GENERATED FROM PYTHON SOURCE LINES 255-257

Normalize the features


.. GENERATED FROM PYTHON SOURCE LINES 257-266

.. code-block:: default

    def l2norm(node_feat):
        return torch.nn.functional.local_response_norm(
            node_feat, node_feat.shape[1] * 2, alpha=node_feat.shape[1] * 2, beta=0.5, k=0)

    feat1_local = l2norm(feat1_local)
    feat1_global = l2norm(feat1_global)
    feat2_local = l2norm(feat2_local)
    feat2_global = l2norm(feat2_global)








.. GENERATED FROM PYTHON SOURCE LINES 267-269

Up-sample the features to the original image size and concatenate


.. GENERATED FROM PYTHON SOURCE LINES 269-277

.. code-block:: default

    feat1_local_upsample = torch.nn.functional.interpolate(feat1_local, (obj_resize[1], obj_resize[0]), mode='bilinear')
    feat1_global_upsample = torch.nn.functional.interpolate(feat1_global, (obj_resize[1], obj_resize[0]), mode='bilinear')
    feat2_local_upsample = torch.nn.functional.interpolate(feat2_local, (obj_resize[1], obj_resize[0]), mode='bilinear')
    feat2_global_upsample = torch.nn.functional.interpolate(feat2_global, (obj_resize[1], obj_resize[0]), mode='bilinear')
    feat1_upsample = torch.cat((feat1_local_upsample, feat1_global_upsample), dim=1)
    feat2_upsample = torch.cat((feat2_local_upsample, feat2_global_upsample), dim=1)
    num_features = feat1_upsample.shape[1]








.. GENERATED FROM PYTHON SOURCE LINES 278-280

Extract node features by nearest interpolation


.. GENERATED FROM PYTHON SOURCE LINES 280-285

.. code-block:: default

    rounded_kpts1 = torch.round(kpts1).to(dtype=torch.long)
    rounded_kpts2 = torch.round(kpts2).to(dtype=torch.long)
    node1 = feat1_upsample[0, :, rounded_kpts1[1], rounded_kpts1[0]].t() # shape: NxC
    node2 = feat2_upsample[0, :, rounded_kpts2[1], rounded_kpts2[0]].t() # shape: NxC








.. GENERATED FROM PYTHON SOURCE LINES 286-288

Build edge features as edge lengths


.. GENERATED FROM PYTHON SOURCE LINES 288-296

.. code-block:: default

    kpts1_dis = (kpts1.unsqueeze(0) - kpts1.unsqueeze(1))
    kpts1_dis = torch.norm(kpts1_dis, p=2, dim=2).detach()
    kpts2_dis = (kpts2.unsqueeze(0) - kpts2.unsqueeze(1))
    kpts2_dis = torch.norm(kpts2_dis, p=2, dim=2).detach()

    Q1 = torch.exp(-kpts1_dis / obj_resize[0])
    Q2 = torch.exp(-kpts2_dis / obj_resize[0])








.. GENERATED FROM PYTHON SOURCE LINES 297-299

Matching by IPCA-GM model


.. GENERATED FROM PYTHON SOURCE LINES 299-314

.. code-block:: default

    X = pygm.ipca_gm(node1, node2, A1, A2, pretrain='voc')
    X = pygm.hungarian(X)

    plt.figure(figsize=(8, 4))
    plt.suptitle('Image Matching Result by IPCA-GM')
    ax1 = plt.subplot(1, 2, 1)
    plot_image_with_graph(img1, kpts1, A1)
    ax2 = plt.subplot(1, 2, 2)
    plot_image_with_graph(img2, kpts2, A2)
    for i in range(X.shape[0]):
        j = torch.argmax(X[i]).item()
        con = ConnectionPatch(xyA=kpts1[:, i], xyB=kpts2[:, j], coordsA="data", coordsB="data",
                              axesA=ax1, axesB=ax2, color="red" if i != j else "green")
        plt.gca().add_artist(con)




.. image-sg:: /auto_examples/7.image_matching_by_NN/images/sphx_glr_plot_deep_image_matching_pytorch_005.png
   :alt: Image Matching Result by IPCA-GM
   :srcset: /auto_examples/7.image_matching_by_NN/images/sphx_glr_plot_deep_image_matching_pytorch_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 315-319

Matching by CIE model
^^^^^^^^^^^^^^^^^^^^^^
See :func:`~pygmtools.neural_solvers.cie` for the API reference.


.. GENERATED FROM PYTHON SOURCE LINES 319-326

.. code-block:: default

    path = pygm.utils.download('vgg16_cie_voc_pytorch.pt', 'https://drive.google.com/u/0/uc?export=download&confirm=Z-AR&id=1oRwcnw06t1rCbrIN_7p8TJZY-XkBOFEp')
    cnn.load_state_dict(torch.load(path, map_location=map_location), strict=False)

    with torch.set_grad_enabled(False):
        feat1_local, feat1_global = cnn(torch_img1)
        feat2_local, feat2_global = cnn(torch_img2)








.. GENERATED FROM PYTHON SOURCE LINES 327-329

Normalize the features


.. GENERATED FROM PYTHON SOURCE LINES 329-338

.. code-block:: default

    def l2norm(node_feat):
        return torch.nn.functional.local_response_norm(
            node_feat, node_feat.shape[1] * 2, alpha=node_feat.shape[1] * 2, beta=0.5, k=0)

    feat1_local = l2norm(feat1_local)
    feat1_global = l2norm(feat1_global)
    feat2_local = l2norm(feat2_local)
    feat2_global = l2norm(feat2_global)








.. GENERATED FROM PYTHON SOURCE LINES 339-341

Up-sample the features to the original image size and concatenate


.. GENERATED FROM PYTHON SOURCE LINES 341-349

.. code-block:: default

    feat1_local_upsample = torch.nn.functional.interpolate(feat1_local, (obj_resize[1], obj_resize[0]), mode='bilinear')
    feat1_global_upsample = torch.nn.functional.interpolate(feat1_global, (obj_resize[1], obj_resize[0]), mode='bilinear')
    feat2_local_upsample = torch.nn.functional.interpolate(feat2_local, (obj_resize[1], obj_resize[0]), mode='bilinear')
    feat2_global_upsample = torch.nn.functional.interpolate(feat2_global, (obj_resize[1], obj_resize[0]), mode='bilinear')
    feat1_upsample = torch.cat((feat1_local_upsample, feat1_global_upsample), dim=1)
    feat2_upsample = torch.cat((feat2_local_upsample, feat2_global_upsample), dim=1)
    num_features = feat1_upsample.shape[1]








.. GENERATED FROM PYTHON SOURCE LINES 350-352

Extract node features by nearest interpolation


.. GENERATED FROM PYTHON SOURCE LINES 352-357

.. code-block:: default

    rounded_kpts1 = torch.round(kpts1).to(dtype=torch.long)
    rounded_kpts2 = torch.round(kpts2).to(dtype=torch.long)
    node1 = feat1_upsample[0, :, rounded_kpts1[1], rounded_kpts1[0]].t() # shape: NxC
    node2 = feat2_upsample[0, :, rounded_kpts2[1], rounded_kpts2[0]].t() # shape: NxC








.. GENERATED FROM PYTHON SOURCE LINES 358-360

Build edge features as edge lengths


.. GENERATED FROM PYTHON SOURCE LINES 360-368

.. code-block:: default

    kpts1_dis = (kpts1.unsqueeze(1) - kpts1.unsqueeze(2))
    kpts1_dis = torch.norm(kpts1_dis, p=2, dim=0).detach()
    kpts2_dis = (kpts2.unsqueeze(1) - kpts2.unsqueeze(2))
    kpts2_dis = torch.norm(kpts2_dis, p=2, dim=0).detach()

    Q1 = torch.exp(-kpts1_dis / obj_resize[0]).unsqueeze(-1).to(dtype=torch.float32)
    Q2 = torch.exp(-kpts2_dis / obj_resize[0]).unsqueeze(-1).to(dtype=torch.float32)








.. GENERATED FROM PYTHON SOURCE LINES 369-371

Call CIE matching model


.. GENERATED FROM PYTHON SOURCE LINES 371-386

.. code-block:: default

    X = pygm.cie(node1, node2, A1, A2, Q1, Q2, pretrain='voc')
    X = pygm.hungarian(X)

    plt.figure(figsize=(8, 4))
    plt.suptitle('Image Matching Result by CIE')
    ax1 = plt.subplot(1, 2, 1)
    plot_image_with_graph(img1, kpts1, A1)
    ax2 = plt.subplot(1, 2, 2)
    plot_image_with_graph(img2, kpts2, A2)
    for i in range(X.shape[0]):
        j = torch.argmax(X[i]).item()
        con = ConnectionPatch(xyA=kpts1[:, i], xyB=kpts2[:, j], coordsA="data", coordsB="data",
                              axesA=ax1, axesB=ax2, color="red" if i != j else "green")
        plt.gca().add_artist(con)




.. image-sg:: /auto_examples/7.image_matching_by_NN/images/sphx_glr_plot_deep_image_matching_pytorch_006.png
   :alt: Image Matching Result by CIE
   :srcset: /auto_examples/7.image_matching_by_NN/images/sphx_glr_plot_deep_image_matching_pytorch_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 387-403

Training a deep graph matching model
-------------------------------------
In this section, we show how to build a deep graph matching model which supports end-to-end training.
For the image matching problem considered here, the model is composed of a CNN feature extractor and
a learnable matching module. Take the PCA-GM model as an example.

.. note::
    This simple example is intended to show you how to do the basic forward and backward pass when
    training an end-to-end deep graph matching neural network. A 'more formal' deep learning pipeline
    should involve asynchronized data loader, batched operations, CUDA support and so on, which are
    all omitted in consideration of simplicity. You may refer to `ThinkMatch <https://github.com/Thinklab-SJTU/ThinkMatch>`_
    which is a research protocol with all these advanced features.

Let's firstly define the neural network model. By calling :func:`~pygmtools.utils.get_network`,
it will simply return the network object.


.. GENERATED FROM PYTHON SOURCE LINES 403-438

.. code-block:: default

    class GMNet(torch.nn.Module):
        def __init__(self):
            super(GMNet, self).__init__()
            self.gm_net = pygm.utils.get_network(pygm.pca_gm, pretrain=False) # fetch the network object
            self.cnn = CNNNet(vgg16_cnn)

        def forward(self, img1, img2, kpts1, kpts2, A1, A2):
            # CNN feature extractor layers
            feat1_local, feat1_global = self.cnn(img1)
            feat2_local, feat2_global = self.cnn(img2)
            feat1_local = l2norm(feat1_local)
            feat1_global = l2norm(feat1_global)
            feat2_local = l2norm(feat2_local)
            feat2_global = l2norm(feat2_global)

            # upsample feature map
            feat1_local_upsample = torch.nn.functional.interpolate(feat1_local, (obj_resize[1], obj_resize[0]), mode='bilinear')
            feat1_global_upsample = torch.nn.functional.interpolate(feat1_global, (obj_resize[1], obj_resize[0]), mode='bilinear')
            feat2_local_upsample = torch.nn.functional.interpolate(feat2_local, (obj_resize[1], obj_resize[0]), mode='bilinear')
            feat2_global_upsample = torch.nn.functional.interpolate(feat2_global, (obj_resize[1], obj_resize[0]), mode='bilinear')
            feat1_upsample = torch.cat((feat1_local_upsample, feat1_global_upsample), dim=1)
            feat2_upsample = torch.cat((feat2_local_upsample, feat2_global_upsample), dim=1)

            # assign node features
            rounded_kpts1 = torch.round(kpts1).to(dtype=torch.long)
            rounded_kpts2 = torch.round(kpts2).to(dtype=torch.long)
            node1 = feat1_upsample[0, :, rounded_kpts1[1], rounded_kpts1[0]].t()  # shape: NxC
            node2 = feat2_upsample[0, :, rounded_kpts2[1], rounded_kpts2[0]].t()  # shape: NxC

            # PCA-GM matching layers
            X = pygm.pca_gm(node1, node2, A1, A2, network=self.gm_net) # the network object is reused
            return X

    model = GMNet()








.. GENERATED FROM PYTHON SOURCE LINES 439-442

Define optimizer
^^^^^^^^^^^^^^^^^


.. GENERATED FROM PYTHON SOURCE LINES 442-444

.. code-block:: default

    optim = torch.optim.Adam(model.parameters(), lr=1e-3)








.. GENERATED FROM PYTHON SOURCE LINES 445-448

Forward pass
^^^^^^^^^^^^^


.. GENERATED FROM PYTHON SOURCE LINES 448-450

.. code-block:: default

    X = model(torch_img1, torch_img2, kpts1, kpts2, A1, A2)








.. GENERATED FROM PYTHON SOURCE LINES 451-456

Compute loss
^^^^^^^^^^^^^
In this example, the ground truth matching matrix is a diagonal matrix. We calculate the loss function via
:func:`~pygmtools.utils.permutation_loss`


.. GENERATED FROM PYTHON SOURCE LINES 456-460

.. code-block:: default

    X_gt = torch.eye(X.shape[0])
    loss = pygm.utils.permutation_loss(X, X_gt)
    print(f'loss={loss:.4f}')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss=2.9619




.. GENERATED FROM PYTHON SOURCE LINES 461-464

Backward Pass
^^^^^^^^^^^^^^


.. GENERATED FROM PYTHON SOURCE LINES 464-466

.. code-block:: default

    loss.backward()








.. GENERATED FROM PYTHON SOURCE LINES 467-469

Visualize the gradients


.. GENERATED FROM PYTHON SOURCE LINES 469-479

.. code-block:: default

    plt.figure(figsize=(4, 4))
    plt.title('Gradient Sizes of PCA-GM and VGG16 layers')
    plt.gca().set_xlabel('Layer Index')
    plt.gca().set_ylabel('Average Gradient Size')
    grad_size = []
    for param in model.parameters():
        grad_size.append(torch.abs(param.grad).mean().item())
    print(grad_size)
    plt.stem(grad_size)




.. image-sg:: /auto_examples/7.image_matching_by_NN/images/sphx_glr_plot_deep_image_matching_pytorch_007.png
   :alt: Gradient Sizes of PCA-GM and VGG16 layers
   :srcset: /auto_examples/7.image_matching_by_NN/images/sphx_glr_plot_deep_image_matching_pytorch_007.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [0.00012030009384034202, 0.0029222508892416954, 0.00019840802997350693, 0.0035125715658068657, 0.00021948321955278516, 0.005211487412452698, 1.2157242963439785e-05, 4.538887151284143e-05, 9.093379776459187e-05, 0.003763300133869052, 0.00013752389349974692, 0.0029113302007317543, 0.0005891890614293516, 1.4391055458418123e-08, 0.00123009888920933, 0.0007960228249430656, 0.00019226272706873715, 7.602498186543016e-09, 0.0023636282421648502, 0.00142657570540905, 0.00027515203692018986, 2.3430166695703747e-09, 0.0014325324445962906, 0.001168975606560707, 0.000243743575992994, 3.208436183399499e-09, 0.002457045018672943, 0.0012053920654579997, 0.00024106756609398872, 9.623200014630129e-10, 0.0019094400340691209, 0.0013064424274489284, 0.00019915227312594652, 1.351938450078194e-09, 0.0020241807214915752, 0.0013774647377431393, 0.00020345798111520708, 1.4647631996211885e-09, 0.0024065959732979536, 0.0011330752167850733, 0.00017511722398921847, 4.4791811926181424e-10, 0.002062384970486164, 0.00124924979172647, 0.00013374598347581923, 5.668324698504534e-10, 0.002199235139414668, 0.0013085041427984834, 0.00012718267680611461, 0.0005019083619117737, 0.0018184399232268333, 0.0009283717372454703, 9.876605327008292e-05, 2.2953100531353243e-10, 0.0017888628644868731, 0.0011573054362088442, 8.91995950951241e-05, 0.0008793459855951369]

    <StemContainer object of 3 artists>



.. GENERATED FROM PYTHON SOURCE LINES 480-483

Update the model parameters. A deep learning pipeline should iterate the forward pass
and backward pass steps until convergence.


.. GENERATED FROM PYTHON SOURCE LINES 483-486

.. code-block:: default

    optim.step()
    optim.zero_grad()








.. GENERATED FROM PYTHON SOURCE LINES 487-491

.. note::
    This example supports both GPU and CPU, and the online documentation is built by a CPU-only machine.
    The efficiency will be significantly improved if you run this code on GPU.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 29.845 seconds)


.. _sphx_glr_download_auto_examples_7.image_matching_by_NN_plot_deep_image_matching_pytorch.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_deep_image_matching_pytorch.py <plot_deep_image_matching_pytorch.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_deep_image_matching_pytorch.ipynb <plot_deep_image_matching_pytorch.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
