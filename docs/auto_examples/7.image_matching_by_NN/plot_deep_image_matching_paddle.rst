
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/7.image_matching_by_NN/plot_deep_image_matching_paddle.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_7.image_matching_by_NN_plot_deep_image_matching_paddle.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_7.image_matching_by_NN_plot_deep_image_matching_paddle.py:


==================================================================================
Paddle Backend Example: Matching Image Keypoints by Graph Matching Neural Networks
==================================================================================

This example shows how to match image keypoints by neural network-based graph matching solvers.
These graph matching solvers are designed to match two individual graphs. The matched images
can be further passed to tackle downstream tasks.

.. GENERATED FROM PYTHON SOURCE LINES 11-17

.. code-block:: default


    # Author: Runzhong Wang <runzhong.wang@sjtu.edu.cn>
    #         Wenzheng Pan <pwz1121@sjtu.edu.cn>
    #
    # License: Mulan PSL v2 License








.. GENERATED FROM PYTHON SOURCE LINES 19-28

.. note::
    The following solvers are based on matching two individual graphs, and are included in this example:

    * :func:`~pygmtools.neural_solvers.pca_gm` (neural network solver)

    * :func:`~pygmtools.neural_solvers.ipca_gm` (neural network solver)

    * :func:`~pygmtools.neural_solvers.cie` (neural network solver)


.. GENERATED FROM PYTHON SOURCE LINES 28-45

.. code-block:: default

    import paddle # paddle backend
    from paddle.vision.models import vgg16
    import pygmtools as pygm
    import matplotlib.pyplot as plt # for plotting
    from matplotlib.patches import ConnectionPatch # for plotting matching result
    import scipy.io as sio # for loading .mat file
    import scipy.spatial as spa # for Delaunay triangulation
    from sklearn.decomposition import PCA as PCAdimReduc
    import itertools
    import numpy as np
    from PIL import Image
    import warnings
    warnings.filterwarnings("ignore")
    pygm.set_backend('paddle') # set default backend for pygmtools

    paddle.device.set_device('cpu') # paddle sets device globally





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Place(cpu)



.. GENERATED FROM PYTHON SOURCE LINES 46-58

Predicting Matching by Graph Matching Neural Networks
------------------------------------------------------
In this section we show how to do predictions (inference) by graph matching neural networks.
Let's take PCA-GM (:func:`~pygmtools.neural_solvers.pca_gm`) as an example.

Load the images
^^^^^^^^^^^^^^^^
Images are from the Willow Object Class dataset (this dataset also available with the Benchmark of ``pygmtools``,
see :class:`~pygmtools.dataset.WillowObject`).

The images are resized to 256x256.


.. GENERATED FROM PYTHON SOURCE LINES 58-72

.. code-block:: default

    obj_resize = (256, 256)
    img1 = Image.open('../data/willow_duck_0001.png')
    img2 = Image.open('../data/willow_duck_0002.png')
    kpts1 = paddle.to_tensor(sio.loadmat('../data/willow_duck_0001.mat')['pts_coord'])
    kpts2 = paddle.to_tensor(sio.loadmat('../data/willow_duck_0002.mat')['pts_coord'])
    kpts1[0] = kpts1[0] * obj_resize[0] / img1.size[0]
    kpts1[1] = kpts1[1] * obj_resize[1] / img1.size[1]
    kpts2[0] = kpts2[0] * obj_resize[0] / img2.size[0]
    kpts2[1] = kpts2[1] * obj_resize[1] / img2.size[1]
    img1 = img1.resize(obj_resize, resample=Image.BILINEAR)
    img2 = img2.resize(obj_resize, resample=Image.BILINEAR)
    paddle_img1 = paddle.to_tensor(np.array(img1, dtype=np.float32) / 256).transpose((2, 0, 1)).unsqueeze(0) # shape: BxCxHxW
    paddle_img2 = paddle.to_tensor(np.array(img2, dtype=np.float32) / 256).transpose((2, 0, 1)).unsqueeze(0) # shape: BxCxHxW








.. GENERATED FROM PYTHON SOURCE LINES 73-75

Visualize the images and keypoints


.. GENERATED FROM PYTHON SOURCE LINES 75-90

.. code-block:: default

    def plot_image_with_graph(img, kpt, A=None):
        plt.imshow(img)
        plt.scatter(kpt[0], kpt[1], c='w', edgecolors='k')
        if A is not None:
            for idx in paddle.nonzero(A, as_tuple=False):
                plt.plot((kpt[0, idx[0]], kpt[0, idx[1]]), (kpt[1, idx[0]], kpt[1, idx[1]]), 'k-')

    plt.figure(figsize=(8, 4))
    plt.subplot(1, 2, 1)
    plt.title('Image 1')
    plot_image_with_graph(img1, kpts1)
    plt.subplot(1, 2, 2)
    plt.title('Image 2')
    plot_image_with_graph(img2, kpts2)




.. image-sg:: /auto_examples/7.image_matching_by_NN/images/sphx_glr_plot_deep_image_matching_paddle_001.png
   :alt: Image 1, Image 2
   :srcset: /auto_examples/7.image_matching_by_NN/images/sphx_glr_plot_deep_image_matching_paddle_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 91-96

Build the graphs
^^^^^^^^^^^^^^^^^
Graph structures are built based on the geometric structure of the keypoint set. In this example,
we refer to `Delaunay triangulation <https://en.wikipedia.org/wiki/Delaunay_triangulation>`_.


.. GENERATED FROM PYTHON SOURCE LINES 96-107

.. code-block:: default

    def delaunay_triangulation(kpt):
        d = spa.Delaunay(kpt.numpy().transpose())
        A = paddle.zeros((len(kpt[0]), len(kpt[0])))
        for simplex in d.simplices:
            for pair in itertools.permutations(simplex, 2):
                A[pair] = 1
        return A

    A1 = delaunay_triangulation(kpts1)
    A2 = delaunay_triangulation(kpts2)








.. GENERATED FROM PYTHON SOURCE LINES 108-110

Visualize the graphs


.. GENERATED FROM PYTHON SOURCE LINES 110-118

.. code-block:: default

    plt.figure(figsize=(8, 4))
    plt.subplot(1, 2, 1)
    plt.title('Image 1 with Graphs')
    plot_image_with_graph(img1, kpts1, A1)
    plt.subplot(1, 2, 2)
    plt.title('Image 2 with Graphs')
    plot_image_with_graph(img2, kpts2, A2)




.. image-sg:: /auto_examples/7.image_matching_by_NN/images/sphx_glr_plot_deep_image_matching_paddle_002.png
   :alt: Image 1 with Graphs, Image 2 with Graphs
   :srcset: /auto_examples/7.image_matching_by_NN/images/sphx_glr_plot_deep_image_matching_paddle_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 119-129

Extract node features via CNN
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Deep graph matching solvers can be fused with CNN feature extractors, to build an end-to-end learning pipeline.

In this example, let's adopt the deep graph solvers based on matching two individual graphs.
The image features are based on two intermediate layers from the VGG16 CNN model, following
existing deep graph matching papers (such as :func:`~pygmtools.neural_solvers.pca_gm`)

Let's firstly fetch the VGG16 model:


.. GENERATED FROM PYTHON SOURCE LINES 129-131

.. code-block:: default

    vgg16_cnn = vgg16(batch_norm=True) # vgg16_bn








.. GENERATED FROM PYTHON SOURCE LINES 132-134

List of layers of VGG16:


.. GENERATED FROM PYTHON SOURCE LINES 134-136

.. code-block:: default

    print(vgg16_cnn.features)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Sequential(
      (0): Conv2D(3, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
      (1): BatchNorm2D(num_features=64, momentum=0.9, epsilon=1e-05)
      (2): ReLU()
      (3): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
      (4): BatchNorm2D(num_features=64, momentum=0.9, epsilon=1e-05)
      (5): ReLU()
      (6): MaxPool2D(kernel_size=2, stride=2, padding=0)
      (7): Conv2D(64, 128, kernel_size=[3, 3], padding=1, data_format=NCHW)
      (8): BatchNorm2D(num_features=128, momentum=0.9, epsilon=1e-05)
      (9): ReLU()
      (10): Conv2D(128, 128, kernel_size=[3, 3], padding=1, data_format=NCHW)
      (11): BatchNorm2D(num_features=128, momentum=0.9, epsilon=1e-05)
      (12): ReLU()
      (13): MaxPool2D(kernel_size=2, stride=2, padding=0)
      (14): Conv2D(128, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
      (15): BatchNorm2D(num_features=256, momentum=0.9, epsilon=1e-05)
      (16): ReLU()
      (17): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
      (18): BatchNorm2D(num_features=256, momentum=0.9, epsilon=1e-05)
      (19): ReLU()
      (20): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
      (21): BatchNorm2D(num_features=256, momentum=0.9, epsilon=1e-05)
      (22): ReLU()
      (23): MaxPool2D(kernel_size=2, stride=2, padding=0)
      (24): Conv2D(256, 512, kernel_size=[3, 3], padding=1, data_format=NCHW)
      (25): BatchNorm2D(num_features=512, momentum=0.9, epsilon=1e-05)
      (26): ReLU()
      (27): Conv2D(512, 512, kernel_size=[3, 3], padding=1, data_format=NCHW)
      (28): BatchNorm2D(num_features=512, momentum=0.9, epsilon=1e-05)
      (29): ReLU()
      (30): Conv2D(512, 512, kernel_size=[3, 3], padding=1, data_format=NCHW)
      (31): BatchNorm2D(num_features=512, momentum=0.9, epsilon=1e-05)
      (32): ReLU()
      (33): MaxPool2D(kernel_size=2, stride=2, padding=0)
      (34): Conv2D(512, 512, kernel_size=[3, 3], padding=1, data_format=NCHW)
      (35): BatchNorm2D(num_features=512, momentum=0.9, epsilon=1e-05)
      (36): ReLU()
      (37): Conv2D(512, 512, kernel_size=[3, 3], padding=1, data_format=NCHW)
      (38): BatchNorm2D(num_features=512, momentum=0.9, epsilon=1e-05)
      (39): ReLU()
      (40): Conv2D(512, 512, kernel_size=[3, 3], padding=1, data_format=NCHW)
      (41): BatchNorm2D(num_features=512, momentum=0.9, epsilon=1e-05)
      (42): ReLU()
      (43): MaxPool2D(kernel_size=2, stride=2, padding=0)
    )




.. GENERATED FROM PYTHON SOURCE LINES 137-140

Let's define the CNN feature extractor, which outputs the features of ``layer (30)`` and
``layer (37)``


.. GENERATED FROM PYTHON SOURCE LINES 140-152

.. code-block:: default

    class CNNNet(paddle.nn.Layer):
        def __init__(self, vgg16_module):
            super(CNNNet, self).__init__()
            # The naming of the layers follow ThinkMatch convention to load pretrained models.
            self.node_layers = paddle.nn.Sequential(*[_ for _ in vgg16_module.features[:31]])
            self.edge_layers = paddle.nn.Sequential(*[_ for _ in vgg16_module.features[31:38]])

        def forward(self, inp_img):
            feat_local = self.node_layers(inp_img)
            feat_global = self.edge_layers(feat_local)
            return feat_local, feat_global








.. GENERATED FROM PYTHON SOURCE LINES 153-156

Download pretrained CNN weights (from `ThinkMatch <https://github.com/Thinklab-SJTU/ThinkMatch>`_),
load the weights and then extract the CNN features


.. GENERATED FROM PYTHON SOURCE LINES 156-163

.. code-block:: default

    cnn = CNNNet(vgg16_cnn)
    path = pygm.utils.download('vgg16_pca_voc_paddle.pdparams', 'https://drive.google.com/u/0/uc?export=download&confirm=Z-AR&id=1rIb_fPx20a4Q1GGlUsF8lAY1XNCyGO6L')
    cnn.set_dict(paddle.load(path))
    with paddle.set_grad_enabled(False):
        feat1_local, feat1_global = cnn(paddle_img1)
        feat2_local, feat2_global = cnn(paddle_img2)








.. GENERATED FROM PYTHON SOURCE LINES 164-166

Normalize the features


.. GENERATED FROM PYTHON SOURCE LINES 166-175

.. code-block:: default

    def l2norm(node_feat):
        return paddle.nn.functional.local_response_norm(
            node_feat, node_feat.shape[1] * 2, alpha=node_feat.shape[1] * 2, beta=0.5, k=0)

    feat1_local = l2norm(feat1_local)
    feat1_global = l2norm(feat1_global)
    feat2_local = l2norm(feat2_local)
    feat2_global = l2norm(feat2_global)








.. GENERATED FROM PYTHON SOURCE LINES 176-178

Up-sample the features to the original image size and concatenate


.. GENERATED FROM PYTHON SOURCE LINES 178-186

.. code-block:: default

    feat1_local_upsample = paddle.nn.functional.interpolate(feat1_local, (obj_resize[1], obj_resize[0]), mode='bilinear')
    feat1_global_upsample = paddle.nn.functional.interpolate(feat1_global, (obj_resize[1], obj_resize[0]), mode='bilinear')
    feat2_local_upsample = paddle.nn.functional.interpolate(feat2_local, (obj_resize[1], obj_resize[0]), mode='bilinear')
    feat2_global_upsample = paddle.nn.functional.interpolate(feat2_global, (obj_resize[1], obj_resize[0]), mode='bilinear')
    feat1_upsample = paddle.concat((feat1_local_upsample, feat1_global_upsample), axis=1)
    feat2_upsample = paddle.concat((feat2_local_upsample, feat2_global_upsample), axis=1)
    num_features = feat1_upsample.shape[1]








.. GENERATED FROM PYTHON SOURCE LINES 187-189

Visualize the extracted CNN feature (dimensionality reduction via principle component analysis)


.. GENERATED FROM PYTHON SOURCE LINES 189-210

.. code-block:: default

    pca_dim_reduc = PCAdimReduc(n_components=3, whiten=True)
    feat_dim_reduc = pca_dim_reduc.fit_transform(
        np.concatenate((
            feat1_upsample.transpose((0, 2, 3, 1)).reshape((-1, num_features)).numpy(),
            feat2_upsample.transpose((0, 2, 3, 1)).reshape((-1, num_features)).numpy()
        ), axis=0)
    )
    feat_dim_reduc = feat_dim_reduc / np.max(np.abs(feat_dim_reduc), axis=0, keepdims=True) / 2 + 0.5
    feat1_dim_reduc = feat_dim_reduc[:obj_resize[0] * obj_resize[1], :]
    feat2_dim_reduc = feat_dim_reduc[obj_resize[0] * obj_resize[1]:, :]

    plt.figure(figsize=(8, 4))
    plt.subplot(1, 2, 1)
    plt.title('Image 1 with CNN features')
    plot_image_with_graph(img1, kpts1, A1)
    plt.imshow(feat1_dim_reduc.reshape((obj_resize[1], obj_resize[0], 3)), alpha=0.5)
    plt.subplot(1, 2, 2)
    plt.title('Image 2 with CNN features')
    plot_image_with_graph(img2, kpts2, A2)
    plt.imshow(feat2_dim_reduc.reshape((obj_resize[1], obj_resize[0], 3)), alpha=0.5)




.. image-sg:: /auto_examples/7.image_matching_by_NN/images/sphx_glr_plot_deep_image_matching_paddle_003.png
   :alt: Image 1 with CNN features, Image 2 with CNN features
   :srcset: /auto_examples/7.image_matching_by_NN/images/sphx_glr_plot_deep_image_matching_paddle_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.image.AxesImage object at 0x7f4fdeebf220>



.. GENERATED FROM PYTHON SOURCE LINES 211-213

Extract node features by nearest interpolation


.. GENERATED FROM PYTHON SOURCE LINES 213-219

.. code-block:: default

    rounded_kpts1 = paddle.cast(paddle.round(kpts1), dtype='int64')
    rounded_kpts2 = paddle.cast(paddle.round(kpts2), dtype='int64')

    node1 = feat1_upsample.transpose((2, 3, 0, 1))[rounded_kpts1[1], rounded_kpts1[0]][:, 0]
    node2 = feat2_upsample.transpose((2, 3, 0, 1))[rounded_kpts2[1], rounded_kpts2[0]][:, 0]








.. GENERATED FROM PYTHON SOURCE LINES 220-224

Call PCA-GM matching model
^^^^^^^^^^^^^^^^^^^^^^^^^^
See :func:`~pygmtools.neural_solvers.pca_gm` for the API reference.


.. GENERATED FROM PYTHON SOURCE LINES 224-239

.. code-block:: default

    X = pygm.pca_gm(node1, node2, A1, A2, pretrain='voc')
    X = pygm.hungarian(X)

    plt.figure(figsize=(8, 4))
    plt.suptitle('Image Matching Result by PCA-GM')
    ax1 = plt.subplot(1, 2, 1)
    plot_image_with_graph(img1, kpts1, A1)
    ax2 = plt.subplot(1, 2, 2)
    plot_image_with_graph(img2, kpts2, A2)
    for i in range(X.shape[0]):
        j = paddle.argmax(X[i]).item()
        con = ConnectionPatch(xyA=kpts1[:, i], xyB=kpts2[:, j], coordsA="data", coordsB="data",
                              axesA=ax1, axesB=ax2, color="red" if i != j else "green")
        plt.gca().add_artist(con)




.. image-sg:: /auto_examples/7.image_matching_by_NN/images/sphx_glr_plot_deep_image_matching_paddle_004.png
   :alt: Image Matching Result by PCA-GM
   :srcset: /auto_examples/7.image_matching_by_NN/images/sphx_glr_plot_deep_image_matching_paddle_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 240-249

Matching images with other neural networks
-------------------------------------------
The above pipeline also works for other deep graph matching networks. Here we give examples of
:func:`~pygmtoools.neural_solvers.ipca_gm` and :func:`~pygmtoools.neural_solvers.cie`.

Matching by IPCA-GM model
^^^^^^^^^^^^^^^^^^^^^^^^^
See :func:`~pygmtools.neural_solvers.ipca_gm` for the API reference.


.. GENERATED FROM PYTHON SOURCE LINES 249-256

.. code-block:: default

    path = pygm.utils.download('vgg16_ipca_voc_paddle.pdparams', 'https://drive.google.com/u/0/uc?export=download&confirm=Z-AR&id=1h_VEmlfMAeBszoR0DvMr6EPXdNVTfTgf')
    cnn.set_dict(paddle.load(path))

    with paddle.set_grad_enabled(False):
        feat1_local, feat1_global = cnn(paddle_img1)
        feat2_local, feat2_global = cnn(paddle_img2)








.. GENERATED FROM PYTHON SOURCE LINES 257-259

Normalize the features


.. GENERATED FROM PYTHON SOURCE LINES 259-268

.. code-block:: default

    def l2norm(node_feat):
        return paddle.nn.functional.local_response_norm(
            node_feat, node_feat.shape[1] * 2, alpha=node_feat.shape[1] * 2, beta=0.5, k=0)

    feat1_local = l2norm(feat1_local)
    feat1_global = l2norm(feat1_global)
    feat2_local = l2norm(feat2_local)
    feat2_global = l2norm(feat2_global)








.. GENERATED FROM PYTHON SOURCE LINES 269-271

Up-sample the features to the original image size and concatenate


.. GENERATED FROM PYTHON SOURCE LINES 271-279

.. code-block:: default

    feat1_local_upsample = paddle.nn.functional.interpolate(feat1_local, (obj_resize[1], obj_resize[0]), mode='bilinear')
    feat1_global_upsample = paddle.nn.functional.interpolate(feat1_global, (obj_resize[1], obj_resize[0]), mode='bilinear')
    feat2_local_upsample = paddle.nn.functional.interpolate(feat2_local, (obj_resize[1], obj_resize[0]), mode='bilinear')
    feat2_global_upsample = paddle.nn.functional.interpolate(feat2_global, (obj_resize[1], obj_resize[0]), mode='bilinear')
    feat1_upsample = paddle.concat((feat1_local_upsample, feat1_global_upsample), axis=1)
    feat2_upsample = paddle.concat((feat2_local_upsample, feat2_global_upsample), axis=1)
    num_features = feat1_upsample.shape[1]








.. GENERATED FROM PYTHON SOURCE LINES 280-282

Extract node features by nearest interpolation


.. GENERATED FROM PYTHON SOURCE LINES 282-288

.. code-block:: default

    rounded_kpts1 = paddle.cast(paddle.round(kpts1), dtype='int64')
    rounded_kpts2 = paddle.cast(paddle.round(kpts2), dtype='int64')

    node1 = feat1_upsample.transpose((2, 3, 0, 1))[rounded_kpts1[1], rounded_kpts1[0]][:, 0]
    node2 = feat2_upsample.transpose((2, 3, 0, 1))[rounded_kpts2[1], rounded_kpts2[0]][:, 0]








.. GENERATED FROM PYTHON SOURCE LINES 289-291

Build edge features as edge lengths


.. GENERATED FROM PYTHON SOURCE LINES 291-299

.. code-block:: default

    kpts1_dis = (kpts1.unsqueeze(0) - kpts1.unsqueeze(1))
    kpts1_dis = paddle.norm(kpts1_dis, p=2, axis=2).detach()
    kpts2_dis = (kpts2.unsqueeze(0) - kpts2.unsqueeze(1))
    kpts2_dis = paddle.norm(kpts2_dis, p=2, axis=2).detach()

    Q1 = paddle.exp(-kpts1_dis / obj_resize[0])
    Q2 = paddle.exp(-kpts2_dis / obj_resize[0])








.. GENERATED FROM PYTHON SOURCE LINES 300-302

Matching by IPCA-GM model


.. GENERATED FROM PYTHON SOURCE LINES 302-317

.. code-block:: default

    X = pygm.ipca_gm(node1, node2, A1, A2, pretrain='voc')
    X = pygm.hungarian(X)

    plt.figure(figsize=(8, 4))
    plt.suptitle('Image Matching Result by IPCA-GM')
    ax1 = plt.subplot(1, 2, 1)
    plot_image_with_graph(img1, kpts1, A1)
    ax2 = plt.subplot(1, 2, 2)
    plot_image_with_graph(img2, kpts2, A2)
    for i in range(X.shape[0]):
        j = paddle.argmax(X[i]).item()
        con = ConnectionPatch(xyA=kpts1[:, i], xyB=kpts2[:, j], coordsA="data", coordsB="data",
                              axesA=ax1, axesB=ax2, color="red" if i != j else "green")
        plt.gca().add_artist(con)




.. image-sg:: /auto_examples/7.image_matching_by_NN/images/sphx_glr_plot_deep_image_matching_paddle_005.png
   :alt: Image Matching Result by IPCA-GM
   :srcset: /auto_examples/7.image_matching_by_NN/images/sphx_glr_plot_deep_image_matching_paddle_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 318-322

Matching by CIE model
^^^^^^^^^^^^^^^^^^^^^^
See :func:`~pygmtools.neural_solvers.cie` for the API reference.


.. GENERATED FROM PYTHON SOURCE LINES 322-329

.. code-block:: default

    path = pygm.utils.download('vgg16_cie_voc_paddle.pdparams', 'https://drive.google.com/u/0/uc?export=download&confirm=Z-AR&id=18MwP3nuMkqDiiwRd_y6rlFmtjKi9THb-')
    cnn.set_dict(paddle.load(path))

    with paddle.set_grad_enabled(False):
        feat1_local, feat1_global = cnn(paddle_img1)
        feat2_local, feat2_global = cnn(paddle_img2)








.. GENERATED FROM PYTHON SOURCE LINES 330-332

Normalize the features


.. GENERATED FROM PYTHON SOURCE LINES 332-341

.. code-block:: default

    def l2norm(node_feat):
        return paddle.nn.functional.local_response_norm(
            node_feat, node_feat.shape[1] * 2, alpha=node_feat.shape[1] * 2, beta=0.5, k=0)

    feat1_local = l2norm(feat1_local)
    feat1_global = l2norm(feat1_global)
    feat2_local = l2norm(feat2_local)
    feat2_global = l2norm(feat2_global)








.. GENERATED FROM PYTHON SOURCE LINES 342-344

Up-sample the features to the original image size and concatenate


.. GENERATED FROM PYTHON SOURCE LINES 344-352

.. code-block:: default

    feat1_local_upsample = paddle.nn.functional.interpolate(feat1_local, (obj_resize[1], obj_resize[0]), mode='bilinear')
    feat1_global_upsample = paddle.nn.functional.interpolate(feat1_global, (obj_resize[1], obj_resize[0]), mode='bilinear')
    feat2_local_upsample = paddle.nn.functional.interpolate(feat2_local, (obj_resize[1], obj_resize[0]), mode='bilinear')
    feat2_global_upsample = paddle.nn.functional.interpolate(feat2_global, (obj_resize[1], obj_resize[0]), mode='bilinear')
    feat1_upsample = paddle.concat((feat1_local_upsample, feat1_global_upsample), axis=1)
    feat2_upsample = paddle.concat((feat2_local_upsample, feat2_global_upsample), axis=1)
    num_features = feat1_upsample.shape[1]








.. GENERATED FROM PYTHON SOURCE LINES 353-355

Extract node features by nearest interpolation


.. GENERATED FROM PYTHON SOURCE LINES 355-361

.. code-block:: default

    rounded_kpts1 = paddle.cast(paddle.round(kpts1), dtype='int64')
    rounded_kpts2 = paddle.cast(paddle.round(kpts2), dtype='int64')

    node1 = feat1_upsample.transpose((2, 3, 0, 1))[rounded_kpts1[1], rounded_kpts1[0]][:, 0]
    node2 = feat2_upsample.transpose((2, 3, 0, 1))[rounded_kpts2[1], rounded_kpts2[0]][:, 0]








.. GENERATED FROM PYTHON SOURCE LINES 362-364

Build edge features as edge lengths


.. GENERATED FROM PYTHON SOURCE LINES 364-372

.. code-block:: default

    kpts1_dis = (kpts1.unsqueeze(1) - kpts1.unsqueeze(2))
    kpts1_dis = paddle.norm(kpts1_dis, p=2, axis=0).detach()
    kpts2_dis = (kpts2.unsqueeze(1) - kpts2.unsqueeze(2))
    kpts2_dis = paddle.norm(kpts2_dis, p=2, axis=0).detach()

    Q1 = paddle.exp(-kpts1_dis / obj_resize[0]).unsqueeze(-1).cast('float32')
    Q2 = paddle.exp(-kpts2_dis / obj_resize[0]).unsqueeze(-1).cast('float32')








.. GENERATED FROM PYTHON SOURCE LINES 373-375

Call CIE matching model


.. GENERATED FROM PYTHON SOURCE LINES 375-390

.. code-block:: default

    X = pygm.cie(node1, node2, A1, A2, Q1, Q2, pretrain='voc')
    X = pygm.hungarian(X)

    plt.figure(figsize=(8, 4))
    plt.suptitle('Image Matching Result by CIE')
    ax1 = plt.subplot(1, 2, 1)
    plot_image_with_graph(img1, kpts1, A1)
    ax2 = plt.subplot(1, 2, 2)
    plot_image_with_graph(img2, kpts2, A2)
    for i in range(X.shape[0]):
        j = paddle.argmax(X[i]).item()
        con = ConnectionPatch(xyA=kpts1[:, i], xyB=kpts2[:, j], coordsA="data", coordsB="data",
                              axesA=ax1, axesB=ax2, color="red" if i != j else "green")
        plt.gca().add_artist(con)




.. image-sg:: /auto_examples/7.image_matching_by_NN/images/sphx_glr_plot_deep_image_matching_paddle_006.png
   :alt: Image Matching Result by CIE
   :srcset: /auto_examples/7.image_matching_by_NN/images/sphx_glr_plot_deep_image_matching_paddle_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 391-407

Training a deep graph matching model
-------------------------------------
In this section, we show how to build a deep graph matching model which supports end-to-end training.
For the image matching problem considered here, the model is composed of a CNN feature extractor and
a learnable matching module. Take the PCA-GM model as an example.

.. note::
    This simple example is intended to show you how to do the basic forward and backward pass when
    training an end-to-end deep graph matching neural network. A 'more formal' deep learning pipeline
    should involve asynchronized data loader, batched operations, CUDA support and so on, which are
    all omitted in consideration of simplicity. You may refer to `ThinkMatch <https://github.com/Thinklab-SJTU/ThinkMatch>`_
    which is a research protocol with all these advanced features.

Let's firstly define the neural network model. By calling :func:`~pygmtools.utils.get_network`,
it will simply return the network object.


.. GENERATED FROM PYTHON SOURCE LINES 407-442

.. code-block:: default

    class GMNet(paddle.nn.Layer):
        def __init__(self):
            super(GMNet, self).__init__()
            self.gm_net = pygm.utils.get_network(pygm.pca_gm, pretrain=False) # fetch the network object
            self.cnn = CNNNet(vgg16_cnn)

        def forward(self, img1, img2, kpts1, kpts2, A1, A2):
            # CNN feature extractor layers
            feat1_local, feat1_global = self.cnn(img1)
            feat2_local, feat2_global = self.cnn(img2)
            feat1_local = l2norm(feat1_local)
            feat1_global = l2norm(feat1_global)
            feat2_local = l2norm(feat2_local)
            feat2_global = l2norm(feat2_global)

            # upsample feature map
            feat1_local_upsample = paddle.nn.functional.interpolate(feat1_local, (obj_resize[1], obj_resize[0]), mode='bilinear')
            feat1_global_upsample = paddle.nn.functional.interpolate(feat1_global, (obj_resize[1], obj_resize[0]), mode='bilinear')
            feat2_local_upsample = paddle.nn.functional.interpolate(feat2_local, (obj_resize[1], obj_resize[0]), mode='bilinear')
            feat2_global_upsample = paddle.nn.functional.interpolate(feat2_global, (obj_resize[1], obj_resize[0]), mode='bilinear')
            feat1_upsample = paddle.concat((feat1_local_upsample, feat1_global_upsample), axis=1)
            feat2_upsample = paddle.concat((feat2_local_upsample, feat2_global_upsample), axis=1)

            # assign node features
            rounded_kpts1 = paddle.cast(paddle.round(kpts1), dtype='int64')
            rounded_kpts2 = paddle.cast(paddle.round(kpts2), dtype='int64')
            node1 = feat1_upsample.transpose((2, 3, 0, 1))[rounded_kpts1[1], rounded_kpts1[0]][:, 0]
            node2 = feat2_upsample.transpose((2, 3, 0, 1))[rounded_kpts2[1], rounded_kpts2[0]][:, 0]

            # PCA-GM matching layers
            X = pygm.pca_gm(node1, node2, A1, A2, network=self.gm_net) # the network object is reused
            return X

    model = GMNet()








.. GENERATED FROM PYTHON SOURCE LINES 443-446

Define optimizer
^^^^^^^^^^^^^^^^^


.. GENERATED FROM PYTHON SOURCE LINES 446-448

.. code-block:: default

    optim = paddle.optimizer.Adam(parameters=model.parameters(), learning_rate=1e-3)








.. GENERATED FROM PYTHON SOURCE LINES 449-452

Forward pass
^^^^^^^^^^^^^


.. GENERATED FROM PYTHON SOURCE LINES 452-454

.. code-block:: default

    X = model(paddle_img1, paddle_img2, kpts1, kpts2, A1, A2)








.. GENERATED FROM PYTHON SOURCE LINES 455-460

Compute loss
^^^^^^^^^^^^^
In this example, the ground truth matching matrix is a diagonal matrix. We calculate the loss function via
:func:`~pygmtools.utils.permutation_loss`


.. GENERATED FROM PYTHON SOURCE LINES 460-464

.. code-block:: default

    X_gt = paddle.eye(X.shape[0])
    loss = pygm.utils.permutation_loss(X, X_gt)
    print(f'loss={loss.item():.4f}')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss=3.0636




.. GENERATED FROM PYTHON SOURCE LINES 465-468

Backward Pass
^^^^^^^^^^^^^^


.. GENERATED FROM PYTHON SOURCE LINES 468-470

.. code-block:: default

    loss.backward()








.. GENERATED FROM PYTHON SOURCE LINES 471-473

Visualize the gradients


.. GENERATED FROM PYTHON SOURCE LINES 473-484

.. code-block:: default

    plt.figure(figsize=(4, 4))
    plt.title('Gradient Sizes of PCA-GM and VGG16 layers')
    plt.gca().set_xlabel('Layer Index')
    plt.gca().set_ylabel('Average Gradient Size')
    grad_size = []
    for param in model.parameters():
        if param.grad is not None:
            grad_size.append(paddle.abs(param.grad).mean().item())
    print(grad_size)
    plt.stem(grad_size)




.. image-sg:: /auto_examples/7.image_matching_by_NN/images/sphx_glr_plot_deep_image_matching_paddle_007.png
   :alt: Gradient Sizes of PCA-GM and VGG16 layers
   :srcset: /auto_examples/7.image_matching_by_NN/images/sphx_glr_plot_deep_image_matching_paddle_007.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [0.00017377809854224324, 0.004970689304172993, 0.00020029922598041594, 0.004491607192903757, 0.00024025217862799764, 0.008655954152345657, 8.057090781221632e-06, 3.785791705013253e-05, 0.00010892890713876113, 0.008705638349056244, 0.00013127276906743646, 0.004451324697583914, 0.0004708365013357252, 5.106092437756615e-09, 0.0010730226058512926, 0.0005805740365758538, 0.00015507572970818728, 5.179759732243383e-09, 0.0023203622549772263, 0.0011218125000596046, 0.00023560502449981868, 1.688948758626907e-09, 0.0014106354210525751, 0.0010775862028822303, 0.00020390216377563775, 3.170607776326051e-09, 0.0018936353735625744, 0.0009038165444508195, 0.0002002984838327393, 6.506531979866281e-10, 0.0016013570129871368, 0.0010397139703854918, 0.00016521918587386608, 1.042045005839043e-09, 0.0017121561104431748, 0.0010783353354781866, 0.0001705087342998013, 1.1603373817337115e-09, 0.002016323385760188, 0.000996441813185811, 0.00014709813694935292, 3.410823845584332e-10, 0.001613637781701982, 0.0009654393652454019, 0.0001112126701627858, 4.714198476030163e-10, 0.0018421441782265902, 0.00108684366568923, 0.00010593782644718885, 0.0007217867532745004, 0.0014904793351888657, 0.0007666748133487999, 7.928263221401721e-05, 1.8203083484991112e-10, 0.0013098949566483498, 0.0008494521607644856, 7.790946983732283e-05, 0.0012493234826251864]

    <StemContainer object of 3 artists>



.. GENERATED FROM PYTHON SOURCE LINES 485-488

Update the model parameters. A deep learning pipeline should iterate the forward pass
and backward pass steps until convergence.


.. GENERATED FROM PYTHON SOURCE LINES 488-491

.. code-block:: default

    optim.step()
    optim.clear_grad()








.. GENERATED FROM PYTHON SOURCE LINES 492-495

.. note::
    This example supports both GPU and CPU, and the online documentation is built by a CPU-only machine.
    The efficiency will be significantly improved if you run this code on GPU.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 44.512 seconds)


.. _sphx_glr_download_auto_examples_7.image_matching_by_NN_plot_deep_image_matching_paddle.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_deep_image_matching_paddle.py <plot_deep_image_matching_paddle.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_deep_image_matching_paddle.ipynb <plot_deep_image_matching_paddle.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
