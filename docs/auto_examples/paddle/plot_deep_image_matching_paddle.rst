
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/paddle/plot_deep_image_matching_paddle.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_paddle_plot_deep_image_matching_paddle.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_paddle_plot_deep_image_matching_paddle.py:


==========================================================
Matching Image Keypoints by Graph Matching Neural Networks
==========================================================

This example shows how to match image keypoints by neural network-based graph matching solvers.
These graph matching solvers are designed to match two individual graphs. The matched images
can be further passed to tackle downstream tasks.

.. GENERATED FROM PYTHON SOURCE LINES 11-17

.. code-block:: default


    # Author: Runzhong Wang <runzhong.wang@sjtu.edu.cn>
    #         Wenzheng Pan <pwz1121@sjtu.edu.cn>
    #
    # License: Mulan PSL v2 License








.. GENERATED FROM PYTHON SOURCE LINES 19-28

.. note::
    The following solvers are based on matching two individual graphs, and are included in this example:

    * :func:`~pygmtools.neural_solvers.pca_gm` (neural network solver)

    * :func:`~pygmtools.neural_solvers.ipca_gm` (neural network solver)

    * :func:`~pygmtools.neural_solvers.cie` (neural network solver)


.. GENERATED FROM PYTHON SOURCE LINES 28-46

.. code-block:: default

    import paddle # paddle backend
    from paddle.vision.models import vgg16
    import pygmtools as pygm
    import matplotlib.pyplot as plt # for plotting
    from matplotlib.patches import ConnectionPatch # for plotting matching result
    import scipy.io as sio # for loading .mat file
    import scipy.spatial as spa # for Delaunay triangulation
    from sklearn.decomposition import PCA as PCAdimReduc
    import itertools
    import numpy as np
    from PIL import Image
    import warnings
    warnings.filterwarnings("ignore")
    pygm.BACKEND = 'paddle' # set default backend for pygmtools

    device = paddle.device.get_device()
    paddle.device.set_device(device) # paddle sets device globally





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/setuptools/depends.py:2: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
      import imp
    /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/sklearn/linear_model/_least_angle.py:34: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      method='lar', copy_X=True, eps=np.finfo(np.float).eps,
    /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/sklearn/linear_model/_least_angle.py:164: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      method='lar', copy_X=True, eps=np.finfo(np.float).eps,
    /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/sklearn/linear_model/_least_angle.py:281: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      eps=np.finfo(np.float).eps, copy_Gram=True, verbose=0,
    /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/sklearn/linear_model/_least_angle.py:865: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      eps=np.finfo(np.float).eps, copy_X=True, fit_path=True,
    /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/sklearn/linear_model/_least_angle.py:1121: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      eps=np.finfo(np.float).eps, copy_X=True, fit_path=True,
    /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/sklearn/linear_model/_least_angle.py:1149: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      eps=np.finfo(np.float).eps, positive=False):
    /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/sklearn/linear_model/_least_angle.py:1379: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      max_n_alphas=1000, n_jobs=None, eps=np.finfo(np.float).eps,
    /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/sklearn/linear_model/_least_angle.py:1621: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      max_n_alphas=1000, n_jobs=None, eps=np.finfo(np.float).eps,
    /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/sklearn/linear_model/_least_angle.py:1755: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      eps=np.finfo(np.float).eps, copy_X=True, positive=False):
    /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/sklearn/decomposition/_lda.py:28: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      EPS = np.finfo(np.float).eps

    Place(cpu)



.. GENERATED FROM PYTHON SOURCE LINES 47-59

Predicting Matching by Graph Matching Neural Networks
------------------------------------------------------
In this section we show how to do predictions (inference) by graph matching neural networks.
Let's take PCA-GM (:func:`~pygmtools.neural_solvers.pca_gm`) as an example.

Load the images
^^^^^^^^^^^^^^^^
Images are from the Willow Object Class dataset (this dataset also available with the Benchmark of ``pygmtools``,
see :class:`~pygmtools.dataset.WillowObject`).

The images are resized to 256x256.


.. GENERATED FROM PYTHON SOURCE LINES 59-73

.. code-block:: default

    obj_resize = (256, 256)
    img1 = Image.open('../data/willow_duck_0001.png')
    img2 = Image.open('../data/willow_duck_0002.png')
    kpts1 = paddle.to_tensor(sio.loadmat('../data/willow_duck_0001.mat')['pts_coord'])
    kpts2 = paddle.to_tensor(sio.loadmat('../data/willow_duck_0002.mat')['pts_coord'])
    kpts1[0] = kpts1[0] * obj_resize[0] / img1.size[0]
    kpts1[1] = kpts1[1] * obj_resize[1] / img1.size[1]
    kpts2[0] = kpts2[0] * obj_resize[0] / img2.size[0]
    kpts2[1] = kpts2[1] * obj_resize[1] / img2.size[1]
    img1 = img1.resize(obj_resize, resample=Image.BILINEAR)
    img2 = img2.resize(obj_resize, resample=Image.BILINEAR)
    paddle_img1 = paddle.to_tensor(np.array(img1, dtype=np.float32) / 256).transpose((2, 0, 1)).unsqueeze(0) # shape: BxCxHxW
    paddle_img2 = paddle.to_tensor(np.array(img2, dtype=np.float32) / 256).transpose((2, 0, 1)).unsqueeze(0) # shape: BxCxHxW








.. GENERATED FROM PYTHON SOURCE LINES 74-76

Visualize the images and keypoints


.. GENERATED FROM PYTHON SOURCE LINES 76-91

.. code-block:: default

    def plot_image_with_graph(img, kpt, A=None):
        plt.imshow(img)
        plt.scatter(kpt[0], kpt[1], c='w', edgecolors='k')
        if A is not None:
            for idx in paddle.nonzero(A, as_tuple=False):
                plt.plot((kpt[0, idx[0]], kpt[0, idx[1]]), (kpt[1, idx[0]], kpt[1, idx[1]]), 'k-')

    plt.figure(figsize=(8, 4))
    plt.subplot(1, 2, 1)
    plt.title('Image 1')
    plot_image_with_graph(img1, kpts1)
    plt.subplot(1, 2, 2)
    plt.title('Image 2')
    plot_image_with_graph(img2, kpts2)




.. image-sg:: /auto_examples/paddle/images/sphx_glr_plot_deep_image_matching_paddle_001.png
   :alt: Image 1, Image 2
   :srcset: /auto_examples/paddle/images/sphx_glr_plot_deep_image_matching_paddle_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 92-97

Build the graphs
^^^^^^^^^^^^^^^^^
Graph structures are built based on the geometric structure of the keypoint set. In this example,
we refer to `Delaunay triangulation <https://en.wikipedia.org/wiki/Delaunay_triangulation>`_.


.. GENERATED FROM PYTHON SOURCE LINES 97-108

.. code-block:: default

    def delaunay_triangulation(kpt):
        d = spa.Delaunay(kpt.numpy().transpose())
        A = paddle.zeros((len(kpt[0]), len(kpt[0])))
        for simplex in d.simplices:
            for pair in itertools.permutations(simplex, 2):
                A[pair] = 1
        return A

    A1 = delaunay_triangulation(kpts1)
    A2 = delaunay_triangulation(kpts2)








.. GENERATED FROM PYTHON SOURCE LINES 109-111

Visualize the graphs


.. GENERATED FROM PYTHON SOURCE LINES 111-119

.. code-block:: default

    plt.figure(figsize=(8, 4))
    plt.subplot(1, 2, 1)
    plt.title('Image 1 with Graphs')
    plot_image_with_graph(img1, kpts1, A1)
    plt.subplot(1, 2, 2)
    plt.title('Image 2 with Graphs')
    plot_image_with_graph(img2, kpts2, A2)




.. image-sg:: /auto_examples/paddle/images/sphx_glr_plot_deep_image_matching_paddle_002.png
   :alt: Image 1 with Graphs, Image 2 with Graphs
   :srcset: /auto_examples/paddle/images/sphx_glr_plot_deep_image_matching_paddle_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 120-130

Extract node features via CNN
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Deep graph matching solvers can be fused with CNN feature extractors, to build an end-to-end learning pipeline.

In this example, let's adopt the deep graph solvers based on matching two individual graphs.
The image features are based on two intermediate layers from the VGG16 CNN model, following
existing deep graph matching papers (such as :func:`~pygmtools.neural_solvers.pca_gm`)

Let's firstly fetch the VGG16 model:


.. GENERATED FROM PYTHON SOURCE LINES 130-132

.. code-block:: default

    vgg16_cnn = vgg16(batch_norm=True) # vgg16_bn








.. GENERATED FROM PYTHON SOURCE LINES 133-135

List of layers of VGG16:


.. GENERATED FROM PYTHON SOURCE LINES 135-137

.. code-block:: default

    print(vgg16_cnn.features)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Sequential(
      (0): Conv2D(3, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
      (1): BatchNorm2D(num_features=64, momentum=0.9, epsilon=1e-05)
      (2): ReLU()
      (3): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
      (4): BatchNorm2D(num_features=64, momentum=0.9, epsilon=1e-05)
      (5): ReLU()
      (6): MaxPool2D(kernel_size=2, stride=2, padding=0)
      (7): Conv2D(64, 128, kernel_size=[3, 3], padding=1, data_format=NCHW)
      (8): BatchNorm2D(num_features=128, momentum=0.9, epsilon=1e-05)
      (9): ReLU()
      (10): Conv2D(128, 128, kernel_size=[3, 3], padding=1, data_format=NCHW)
      (11): BatchNorm2D(num_features=128, momentum=0.9, epsilon=1e-05)
      (12): ReLU()
      (13): MaxPool2D(kernel_size=2, stride=2, padding=0)
      (14): Conv2D(128, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
      (15): BatchNorm2D(num_features=256, momentum=0.9, epsilon=1e-05)
      (16): ReLU()
      (17): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
      (18): BatchNorm2D(num_features=256, momentum=0.9, epsilon=1e-05)
      (19): ReLU()
      (20): Conv2D(256, 256, kernel_size=[3, 3], padding=1, data_format=NCHW)
      (21): BatchNorm2D(num_features=256, momentum=0.9, epsilon=1e-05)
      (22): ReLU()
      (23): MaxPool2D(kernel_size=2, stride=2, padding=0)
      (24): Conv2D(256, 512, kernel_size=[3, 3], padding=1, data_format=NCHW)
      (25): BatchNorm2D(num_features=512, momentum=0.9, epsilon=1e-05)
      (26): ReLU()
      (27): Conv2D(512, 512, kernel_size=[3, 3], padding=1, data_format=NCHW)
      (28): BatchNorm2D(num_features=512, momentum=0.9, epsilon=1e-05)
      (29): ReLU()
      (30): Conv2D(512, 512, kernel_size=[3, 3], padding=1, data_format=NCHW)
      (31): BatchNorm2D(num_features=512, momentum=0.9, epsilon=1e-05)
      (32): ReLU()
      (33): MaxPool2D(kernel_size=2, stride=2, padding=0)
      (34): Conv2D(512, 512, kernel_size=[3, 3], padding=1, data_format=NCHW)
      (35): BatchNorm2D(num_features=512, momentum=0.9, epsilon=1e-05)
      (36): ReLU()
      (37): Conv2D(512, 512, kernel_size=[3, 3], padding=1, data_format=NCHW)
      (38): BatchNorm2D(num_features=512, momentum=0.9, epsilon=1e-05)
      (39): ReLU()
      (40): Conv2D(512, 512, kernel_size=[3, 3], padding=1, data_format=NCHW)
      (41): BatchNorm2D(num_features=512, momentum=0.9, epsilon=1e-05)
      (42): ReLU()
      (43): MaxPool2D(kernel_size=2, stride=2, padding=0)
    )




.. GENERATED FROM PYTHON SOURCE LINES 138-141

Let's define the CNN feature extractor, which outputs the features of ``layer (30)`` and
``layer (37)``


.. GENERATED FROM PYTHON SOURCE LINES 141-153

.. code-block:: default

    class CNNNet(paddle.nn.Layer):
        def __init__(self, vgg16_module):
            super(CNNNet, self).__init__()
            # The naming of the layers follow ThinkMatch convention to load pretrained models.
            self.node_layers = paddle.nn.Sequential(*[_ for _ in vgg16_module.features[:31]])
            self.edge_layers = paddle.nn.Sequential(*[_ for _ in vgg16_module.features[31:38]])

        def forward(self, inp_img):
            feat_local = self.node_layers(inp_img)
            feat_global = self.edge_layers(feat_local)
            return feat_local, feat_global








.. GENERATED FROM PYTHON SOURCE LINES 154-157

Download pretrained CNN weights (from `ThinkMatch <https://github.com/Thinklab-SJTU/ThinkMatch>`_),
load the weights and then extract the CNN features


.. GENERATED FROM PYTHON SOURCE LINES 157-164

.. code-block:: default

    cnn = CNNNet(vgg16_cnn)
    path = pygm.utils.download('vgg16_pca_voc_paddle.pdparams', 'https://drive.google.com/u/0/uc?export=download&confirm=Z-AR&id=1rIb_fPx20a4Q1GGlUsF8lAY1XNCyGO6L')
    cnn.set_dict(paddle.load(path))
    with paddle.set_grad_enabled(False):
        feat1_local, feat1_global = cnn(paddle_img1)
        feat2_local, feat2_global = cnn(paddle_img2)








.. GENERATED FROM PYTHON SOURCE LINES 165-167

Normalize the features


.. GENERATED FROM PYTHON SOURCE LINES 167-176

.. code-block:: default

    def l2norm(node_feat):
        return paddle.nn.functional.local_response_norm(
            node_feat, node_feat.shape[1] * 2, alpha=node_feat.shape[1] * 2, beta=0.5, k=0)

    feat1_local = l2norm(feat1_local)
    feat1_global = l2norm(feat1_global)
    feat2_local = l2norm(feat2_local)
    feat2_global = l2norm(feat2_global)








.. GENERATED FROM PYTHON SOURCE LINES 177-179

Up-sample the features to the original image size and concatenate


.. GENERATED FROM PYTHON SOURCE LINES 179-187

.. code-block:: default

    feat1_local_upsample = paddle.nn.functional.interpolate(feat1_local, (obj_resize[1], obj_resize[0]), mode='bilinear')
    feat1_global_upsample = paddle.nn.functional.interpolate(feat1_global, (obj_resize[1], obj_resize[0]), mode='bilinear')
    feat2_local_upsample = paddle.nn.functional.interpolate(feat2_local, (obj_resize[1], obj_resize[0]), mode='bilinear')
    feat2_global_upsample = paddle.nn.functional.interpolate(feat2_global, (obj_resize[1], obj_resize[0]), mode='bilinear')
    feat1_upsample = paddle.concat((feat1_local_upsample, feat1_global_upsample), axis=1)
    feat2_upsample = paddle.concat((feat2_local_upsample, feat2_global_upsample), axis=1)
    num_features = feat1_upsample.shape[1]








.. GENERATED FROM PYTHON SOURCE LINES 188-190

Visualize the extracted CNN feature (dimensionality reduction via principle component analysis)


.. GENERATED FROM PYTHON SOURCE LINES 190-211

.. code-block:: default

    pca_dim_reduc = PCAdimReduc(n_components=3, whiten=True)
    feat_dim_reduc = pca_dim_reduc.fit_transform(
        np.concatenate((
            feat1_upsample.transpose((0, 2, 3, 1)).reshape((-1, num_features)).numpy(),
            feat2_upsample.transpose((0, 2, 3, 1)).reshape((-1, num_features)).numpy()
        ), axis=0)
    )
    feat_dim_reduc = feat_dim_reduc / np.max(np.abs(feat_dim_reduc), axis=0, keepdims=True) / 2 + 0.5
    feat1_dim_reduc = feat_dim_reduc[:obj_resize[0] * obj_resize[1], :]
    feat2_dim_reduc = feat_dim_reduc[obj_resize[0] * obj_resize[1]:, :]

    plt.figure(figsize=(8, 4))
    plt.subplot(1, 2, 1)
    plt.title('Image 1 with CNN features')
    plot_image_with_graph(img1, kpts1, A1)
    plt.imshow(feat1_dim_reduc.reshape((obj_resize[1], obj_resize[0], 3)), alpha=0.5)
    plt.subplot(1, 2, 2)
    plt.title('Image 2 with CNN features')
    plot_image_with_graph(img2, kpts2, A2)
    plt.imshow(feat2_dim_reduc.reshape((obj_resize[1], obj_resize[0], 3)), alpha=0.5)




.. image-sg:: /auto_examples/paddle/images/sphx_glr_plot_deep_image_matching_paddle_003.png
   :alt: Image 1 with CNN features, Image 2 with CNN features
   :srcset: /auto_examples/paddle/images/sphx_glr_plot_deep_image_matching_paddle_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.image.AxesImage object at 0x7fd9e1354f40>



.. GENERATED FROM PYTHON SOURCE LINES 212-214

Extract node features by nearest interpolation


.. GENERATED FROM PYTHON SOURCE LINES 214-220

.. code-block:: default

    rounded_kpts1 = paddle.cast(paddle.round(kpts1), dtype='int64')
    rounded_kpts2 = paddle.cast(paddle.round(kpts2), dtype='int64')

    node1 = feat1_upsample.transpose((2, 3, 0, 1))[rounded_kpts1[1], rounded_kpts1[0]][:, 0]
    node2 = feat2_upsample.transpose((2, 3, 0, 1))[rounded_kpts2[1], rounded_kpts2[0]][:, 0]








.. GENERATED FROM PYTHON SOURCE LINES 221-225

Call PCA-GM matching model
^^^^^^^^^^^^^^^^^^^^^^^^^^
See :func:`~pygmtools.neural_solvers.pca_gm` for the API reference.


.. GENERATED FROM PYTHON SOURCE LINES 225-240

.. code-block:: default

    X = pygm.pca_gm(node1, node2, A1, A2, pretrain='voc')
    X = pygm.hungarian(X)

    plt.figure(figsize=(8, 4))
    plt.suptitle('Image Matching Result by PCA-GM')
    ax1 = plt.subplot(1, 2, 1)
    plot_image_with_graph(img1, kpts1, A1)
    ax2 = plt.subplot(1, 2, 2)
    plot_image_with_graph(img2, kpts2, A2)
    for i in range(X.shape[0]):
        j = paddle.argmax(X[i]).item()
        con = ConnectionPatch(xyA=kpts1[:, i], xyB=kpts2[:, j], coordsA="data", coordsB="data",
                              axesA=ax1, axesB=ax2, color="red" if i != j else "green")
        plt.gca().add_artist(con)




.. image-sg:: /auto_examples/paddle/images/sphx_glr_plot_deep_image_matching_paddle_004.png
   :alt: Image Matching Result by PCA-GM
   :srcset: /auto_examples/paddle/images/sphx_glr_plot_deep_image_matching_paddle_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 241-250

Matching images with other neural networks
-------------------------------------------
The above pipeline also works for other deep graph matching networks. Here we give examples of
:func:`~pygmtoools.neural_solvers.ipca_gm` and :func:`~pygmtoools.neural_solvers.cie`.

Matching by IPCA-GM model
^^^^^^^^^^^^^^^^^^^^^^^^^
See :func:`~pygmtools.neural_solvers.ipca_gm` for the API reference.


.. GENERATED FROM PYTHON SOURCE LINES 250-257

.. code-block:: default

    path = pygm.utils.download('vgg16_ipca_voc_paddle.pdparams', 'https://drive.google.com/u/0/uc?export=download&confirm=Z-AR&id=1h_VEmlfMAeBszoR0DvMr6EPXdNVTfTgf')
    cnn.set_dict(paddle.load(path))

    with paddle.set_grad_enabled(False):
        feat1_local, feat1_global = cnn(paddle_img1)
        feat2_local, feat2_global = cnn(paddle_img2)








.. GENERATED FROM PYTHON SOURCE LINES 258-260

Normalize the features


.. GENERATED FROM PYTHON SOURCE LINES 260-269

.. code-block:: default

    def l2norm(node_feat):
        return paddle.nn.functional.local_response_norm(
            node_feat, node_feat.shape[1] * 2, alpha=node_feat.shape[1] * 2, beta=0.5, k=0)

    feat1_local = l2norm(feat1_local)
    feat1_global = l2norm(feat1_global)
    feat2_local = l2norm(feat2_local)
    feat2_global = l2norm(feat2_global)








.. GENERATED FROM PYTHON SOURCE LINES 270-272

Up-sample the features to the original image size and concatenate


.. GENERATED FROM PYTHON SOURCE LINES 272-280

.. code-block:: default

    feat1_local_upsample = paddle.nn.functional.interpolate(feat1_local, (obj_resize[1], obj_resize[0]), mode='bilinear')
    feat1_global_upsample = paddle.nn.functional.interpolate(feat1_global, (obj_resize[1], obj_resize[0]), mode='bilinear')
    feat2_local_upsample = paddle.nn.functional.interpolate(feat2_local, (obj_resize[1], obj_resize[0]), mode='bilinear')
    feat2_global_upsample = paddle.nn.functional.interpolate(feat2_global, (obj_resize[1], obj_resize[0]), mode='bilinear')
    feat1_upsample = paddle.concat((feat1_local_upsample, feat1_global_upsample), axis=1)
    feat2_upsample = paddle.concat((feat2_local_upsample, feat2_global_upsample), axis=1)
    num_features = feat1_upsample.shape[1]








.. GENERATED FROM PYTHON SOURCE LINES 281-283

Extract node features by nearest interpolation


.. GENERATED FROM PYTHON SOURCE LINES 283-289

.. code-block:: default

    rounded_kpts1 = paddle.cast(paddle.round(kpts1), dtype='int64')
    rounded_kpts2 = paddle.cast(paddle.round(kpts2), dtype='int64')

    node1 = feat1_upsample.transpose((2, 3, 0, 1))[rounded_kpts1[1], rounded_kpts1[0]][:, 0]
    node2 = feat2_upsample.transpose((2, 3, 0, 1))[rounded_kpts2[1], rounded_kpts2[0]][:, 0]








.. GENERATED FROM PYTHON SOURCE LINES 290-292

Build edge features as edge lengths


.. GENERATED FROM PYTHON SOURCE LINES 292-300

.. code-block:: default

    kpts1_dis = (kpts1.unsqueeze(0) - kpts1.unsqueeze(1))
    kpts1_dis = paddle.norm(kpts1_dis, p=2, axis=2).detach()
    kpts2_dis = (kpts2.unsqueeze(0) - kpts2.unsqueeze(1))
    kpts2_dis = paddle.norm(kpts2_dis, p=2, axis=2).detach()

    Q1 = paddle.exp(-kpts1_dis / obj_resize[0])
    Q2 = paddle.exp(-kpts2_dis / obj_resize[0])








.. GENERATED FROM PYTHON SOURCE LINES 301-303

Matching by IPCA-GM model


.. GENERATED FROM PYTHON SOURCE LINES 303-318

.. code-block:: default

    X = pygm.ipca_gm(node1, node2, A1, A2, pretrain='voc')
    X = pygm.hungarian(X)

    plt.figure(figsize=(8, 4))
    plt.suptitle('Image Matching Result by IPCA-GM')
    ax1 = plt.subplot(1, 2, 1)
    plot_image_with_graph(img1, kpts1, A1)
    ax2 = plt.subplot(1, 2, 2)
    plot_image_with_graph(img2, kpts2, A2)
    for i in range(X.shape[0]):
        j = paddle.argmax(X[i]).item()
        con = ConnectionPatch(xyA=kpts1[:, i], xyB=kpts2[:, j], coordsA="data", coordsB="data",
                              axesA=ax1, axesB=ax2, color="red" if i != j else "green")
        plt.gca().add_artist(con)




.. image-sg:: /auto_examples/paddle/images/sphx_glr_plot_deep_image_matching_paddle_005.png
   :alt: Image Matching Result by IPCA-GM
   :srcset: /auto_examples/paddle/images/sphx_glr_plot_deep_image_matching_paddle_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 319-323

Matching by CIE model
^^^^^^^^^^^^^^^^^^^^^^
See :func:`~pygmtools.neural_solvers.cie` for the API reference.


.. GENERATED FROM PYTHON SOURCE LINES 323-330

.. code-block:: default

    path = pygm.utils.download('vgg16_cie_voc_paddle.pdparams', 'https://drive.google.com/u/0/uc?export=download&confirm=Z-AR&id=18MwP3nuMkqDiiwRd_y6rlFmtjKi9THb-')
    cnn.set_dict(paddle.load(path))

    with paddle.set_grad_enabled(False):
        feat1_local, feat1_global = cnn(paddle_img1)
        feat2_local, feat2_global = cnn(paddle_img2)








.. GENERATED FROM PYTHON SOURCE LINES 331-333

Normalize the features


.. GENERATED FROM PYTHON SOURCE LINES 333-342

.. code-block:: default

    def l2norm(node_feat):
        return paddle.nn.functional.local_response_norm(
            node_feat, node_feat.shape[1] * 2, alpha=node_feat.shape[1] * 2, beta=0.5, k=0)

    feat1_local = l2norm(feat1_local)
    feat1_global = l2norm(feat1_global)
    feat2_local = l2norm(feat2_local)
    feat2_global = l2norm(feat2_global)








.. GENERATED FROM PYTHON SOURCE LINES 343-345

Up-sample the features to the original image size and concatenate


.. GENERATED FROM PYTHON SOURCE LINES 345-353

.. code-block:: default

    feat1_local_upsample = paddle.nn.functional.interpolate(feat1_local, (obj_resize[1], obj_resize[0]), mode='bilinear')
    feat1_global_upsample = paddle.nn.functional.interpolate(feat1_global, (obj_resize[1], obj_resize[0]), mode='bilinear')
    feat2_local_upsample = paddle.nn.functional.interpolate(feat2_local, (obj_resize[1], obj_resize[0]), mode='bilinear')
    feat2_global_upsample = paddle.nn.functional.interpolate(feat2_global, (obj_resize[1], obj_resize[0]), mode='bilinear')
    feat1_upsample = paddle.concat((feat1_local_upsample, feat1_global_upsample), axis=1)
    feat2_upsample = paddle.concat((feat2_local_upsample, feat2_global_upsample), axis=1)
    num_features = feat1_upsample.shape[1]








.. GENERATED FROM PYTHON SOURCE LINES 354-356

Extract node features by nearest interpolation


.. GENERATED FROM PYTHON SOURCE LINES 356-362

.. code-block:: default

    rounded_kpts1 = paddle.cast(paddle.round(kpts1), dtype='int64')
    rounded_kpts2 = paddle.cast(paddle.round(kpts2), dtype='int64')

    node1 = feat1_upsample.transpose((2, 3, 0, 1))[rounded_kpts1[1], rounded_kpts1[0]][:, 0]
    node2 = feat2_upsample.transpose((2, 3, 0, 1))[rounded_kpts2[1], rounded_kpts2[0]][:, 0]








.. GENERATED FROM PYTHON SOURCE LINES 363-365

Build edge features as edge lengths


.. GENERATED FROM PYTHON SOURCE LINES 365-373

.. code-block:: default

    kpts1_dis = (kpts1.unsqueeze(1) - kpts1.unsqueeze(2))
    kpts1_dis = paddle.norm(kpts1_dis, p=2, axis=0).detach()
    kpts2_dis = (kpts2.unsqueeze(1) - kpts2.unsqueeze(2))
    kpts2_dis = paddle.norm(kpts2_dis, p=2, axis=0).detach()

    Q1 = paddle.exp(-kpts1_dis / obj_resize[0]).unsqueeze(-1).cast('float32')
    Q2 = paddle.exp(-kpts2_dis / obj_resize[0]).unsqueeze(-1).cast('float32')








.. GENERATED FROM PYTHON SOURCE LINES 374-376

Call CIE matching model


.. GENERATED FROM PYTHON SOURCE LINES 376-391

.. code-block:: default

    X = pygm.cie(node1, node2, A1, A2, Q1, Q2, pretrain='voc')
    X = pygm.hungarian(X)

    plt.figure(figsize=(8, 4))
    plt.suptitle('Image Matching Result by CIE')
    ax1 = plt.subplot(1, 2, 1)
    plot_image_with_graph(img1, kpts1, A1)
    ax2 = plt.subplot(1, 2, 2)
    plot_image_with_graph(img2, kpts2, A2)
    for i in range(X.shape[0]):
        j = paddle.argmax(X[i]).item()
        con = ConnectionPatch(xyA=kpts1[:, i], xyB=kpts2[:, j], coordsA="data", coordsB="data",
                              axesA=ax1, axesB=ax2, color="red" if i != j else "green")
        plt.gca().add_artist(con)




.. image-sg:: /auto_examples/paddle/images/sphx_glr_plot_deep_image_matching_paddle_006.png
   :alt: Image Matching Result by CIE
   :srcset: /auto_examples/paddle/images/sphx_glr_plot_deep_image_matching_paddle_006.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Downloading to /Users/guoziao/Library/Caches/pygmtools/cie_voc_paddle.pdparams...

    Downloading to /Users/guoziao/Library/Caches/pygmtools/cie_voc_paddle.pdparams...
    Warning: Network error. Retrying...
     HTTPSConnectionPool(host='drive.google.com', port=443): Max retries exceeded with url: /u/0/uc?export=download&confirm=Z-AR&id=13dtxDfySvfqQcYvPiTd8Pb2xgcXIesAz (Caused by ProxyError('Cannot connect to proxy.', OSError(0, 'Error')))

    Downloading to /Users/guoziao/Library/Caches/pygmtools/cie_voc_paddle.pdparams...

    Downloading to /Users/guoziao/Library/Caches/pygmtools/cie_voc_paddle.pdparams...
      0%|          | 0/134284544 [00:00<?, ?it/s]      0%|          | 64.0k/128M [00:00<04:53, 457kB/s]      0%|          | 320k/128M [00:00<01:34, 1.42MB/s]      1%|          | 704k/128M [00:00<00:55, 2.39MB/s]      2%|1         | 2.06M/128M [00:00<00:19, 6.69MB/s]      4%|3         | 4.50M/128M [00:00<00:09, 13.0MB/s]      6%|5         | 7.25M/128M [00:00<00:07, 17.4MB/s]      8%|7         | 9.62M/128M [00:00<00:06, 19.7MB/s]     10%|9         | 12.2M/128M [00:00<00:05, 22.1MB/s]     12%|#1        | 15.3M/128M [00:00<00:04, 25.1MB/s]     14%|#3        | 17.8M/128M [00:01<00:05, 21.4MB/s]     16%|#5        | 19.9M/128M [00:01<00:05, 21.3MB/s]     18%|#7        | 22.5M/128M [00:01<00:04, 22.7MB/s]     19%|#9        | 24.8M/128M [00:01<00:04, 22.0MB/s]     21%|##1       | 27.5M/128M [00:01<00:04, 23.3MB/s]     23%|##3       | 29.8M/128M [00:01<00:04, 21.1MB/s]     25%|##4       | 31.9M/128M [00:01<00:06, 15.6MB/s]     26%|##6       | 33.7M/128M [00:02<00:06, 16.1MB/s]     28%|##7       | 35.8M/128M [00:02<00:05, 17.0MB/s]     30%|###       | 38.4M/128M [00:02<00:04, 19.6MB/s]     32%|###1      | 40.5M/128M [00:02<00:04, 20.1MB/s]     33%|###3      | 42.6M/128M [00:02<00:05, 16.7MB/s]     35%|###5      | 45.0M/128M [00:02<00:04, 18.6MB/s]     37%|###6      | 46.9M/128M [00:02<00:04, 17.7MB/s]     39%|###8      | 49.6M/128M [00:02<00:04, 20.2MB/s]     41%|####      | 52.4M/128M [00:03<00:03, 22.3MB/s]     43%|####2     | 54.7M/128M [00:03<00:03, 22.2MB/s]     45%|####4     | 57.4M/128M [00:03<00:03, 23.8MB/s]     47%|####6     | 59.8M/128M [00:03<00:03, 20.2MB/s]     50%|#####     | 64.2M/128M [00:03<00:02, 26.9MB/s]     52%|#####2    | 67.1M/128M [00:03<00:03, 17.0MB/s]     56%|#####5    | 71.5M/128M [00:03<00:02, 22.0MB/s]     58%|#####7    | 74.2M/128M [00:04<00:04, 13.4MB/s]     60%|#####9    | 76.4M/128M [00:04<00:04, 11.4MB/s]     63%|######3   | 81.0M/128M [00:04<00:02, 16.5MB/s]     65%|######5   | 83.6M/128M [00:04<00:02, 16.5MB/s]     67%|######7   | 85.8M/128M [00:05<00:02, 17.1MB/s]     69%|######8   | 88.2M/128M [00:05<00:02, 18.6MB/s]     72%|#######1  | 91.7M/128M [00:05<00:01, 21.2MB/s]     73%|#######3  | 94.1M/128M [00:05<00:01, 19.2MB/s]     75%|#######5  | 96.2M/128M [00:05<00:02, 12.6MB/s]     77%|#######6  | 98.0M/128M [00:05<00:02, 13.5MB/s]     78%|#######7  | 99.7M/128M [00:06<00:02, 13.4MB/s]     79%|#######9  | 101M/128M [00:06<00:01, 14.0MB/s]      80%|########  | 103M/128M [00:06<00:02, 11.9MB/s]     82%|########1 | 105M/128M [00:06<00:01, 14.0MB/s]     84%|########3 | 107M/128M [00:06<00:01, 15.4MB/s]     85%|########4 | 109M/128M [00:06<00:01, 15.9MB/s]     86%|########6 | 110M/128M [00:06<00:01, 13.9MB/s]     87%|########7 | 112M/128M [00:06<00:01, 14.0MB/s]     89%|########8 | 114M/128M [00:07<00:01, 14.7MB/s]     90%|######### | 116M/128M [00:07<00:00, 16.3MB/s]     92%|#########1| 117M/128M [00:07<00:01, 9.32MB/s]     93%|#########2| 119M/128M [00:07<00:01, 9.28MB/s]     94%|#########3| 120M/128M [00:07<00:00, 9.08MB/s]     95%|#########4| 121M/128M [00:07<00:00, 9.82MB/s]     95%|#########5| 122M/128M [00:08<00:00, 9.39MB/s]     98%|#########7| 125M/128M [00:08<00:00, 14.4MB/s]     99%|#########9| 127M/128M [00:08<00:00, 14.5MB/s]    100%|##########| 128M/128M [00:08<00:00, 15.9MB/s]




.. GENERATED FROM PYTHON SOURCE LINES 392-408

Training a deep graph matching model
-------------------------------------
In this section, we show how to build a deep graph matching model which supports end-to-end training.
For the image matching problem considered here, the model is composed of a CNN feature extractor and
a learnable matching module. Take the PCA-GM model as an example.

.. note::
    This simple example is intended to show you how to do the basic forward and backward pass when
    training an end-to-end deep graph matching neural network. A 'more formal' deep learning pipeline
    should involve asynchronized data loader, batched operations, CUDA support and so on, which are
    all omitted in consideration of simplicity. You may refer to `ThinkMatch <https://github.com/Thinklab-SJTU/ThinkMatch>`_
    which is a research protocol with all these advanced features.

Let's firstly define the neural network model. By calling :func:`~pygmtools.utils.get_network`,
it will simply return the network object.


.. GENERATED FROM PYTHON SOURCE LINES 408-443

.. code-block:: default

    class GMNet(paddle.nn.Layer):
        def __init__(self):
            super(GMNet, self).__init__()
            self.gm_net = pygm.utils.get_network(pygm.pca_gm, pretrain=False) # fetch the network object
            self.cnn = CNNNet(vgg16_cnn)

        def forward(self, img1, img2, kpts1, kpts2, A1, A2):
            # CNN feature extractor layers
            feat1_local, feat1_global = self.cnn(img1)
            feat2_local, feat2_global = self.cnn(img2)
            feat1_local = l2norm(feat1_local)
            feat1_global = l2norm(feat1_global)
            feat2_local = l2norm(feat2_local)
            feat2_global = l2norm(feat2_global)

            # upsample feature map
            feat1_local_upsample = paddle.nn.functional.interpolate(feat1_local, (obj_resize[1], obj_resize[0]), mode='bilinear')
            feat1_global_upsample = paddle.nn.functional.interpolate(feat1_global, (obj_resize[1], obj_resize[0]), mode='bilinear')
            feat2_local_upsample = paddle.nn.functional.interpolate(feat2_local, (obj_resize[1], obj_resize[0]), mode='bilinear')
            feat2_global_upsample = paddle.nn.functional.interpolate(feat2_global, (obj_resize[1], obj_resize[0]), mode='bilinear')
            feat1_upsample = paddle.concat((feat1_local_upsample, feat1_global_upsample), axis=1)
            feat2_upsample = paddle.concat((feat2_local_upsample, feat2_global_upsample), axis=1)

            # assign node features
            rounded_kpts1 = paddle.cast(paddle.round(kpts1), dtype='int64')
            rounded_kpts2 = paddle.cast(paddle.round(kpts2), dtype='int64')
            node1 = feat1_upsample.transpose((2, 3, 0, 1))[rounded_kpts1[1], rounded_kpts1[0]][:, 0]
            node2 = feat2_upsample.transpose((2, 3, 0, 1))[rounded_kpts2[1], rounded_kpts2[0]][:, 0]

            # PCA-GM matching layers
            X = pygm.pca_gm(node1, node2, A1, A2, network=self.gm_net) # the network object is reused
            return X

    model = GMNet()








.. GENERATED FROM PYTHON SOURCE LINES 444-447

Define optimizer
^^^^^^^^^^^^^^^^^


.. GENERATED FROM PYTHON SOURCE LINES 447-449

.. code-block:: default

    optim = paddle.optimizer.Adam(parameters=model.parameters(), learning_rate=1e-3)








.. GENERATED FROM PYTHON SOURCE LINES 450-453

Forward pass
^^^^^^^^^^^^^


.. GENERATED FROM PYTHON SOURCE LINES 453-455

.. code-block:: default

    X = model(paddle_img1, paddle_img2, kpts1, kpts2, A1, A2)








.. GENERATED FROM PYTHON SOURCE LINES 456-461

Compute loss
^^^^^^^^^^^^^
In this example, the ground truth matching matrix is a diagonal matrix. We calculate the loss function via
:func:`~pygmtools.utils.permutation_loss`


.. GENERATED FROM PYTHON SOURCE LINES 461-465

.. code-block:: default

    X_gt = paddle.eye(X.shape[0])
    loss = pygm.utils.permutation_loss(X, X_gt)
    print(f'loss={loss.item():.4f}')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss=3.0751




.. GENERATED FROM PYTHON SOURCE LINES 466-469

Backward Pass
^^^^^^^^^^^^^^


.. GENERATED FROM PYTHON SOURCE LINES 469-471

.. code-block:: default

    loss.backward()








.. GENERATED FROM PYTHON SOURCE LINES 472-474

Visualize the gradients


.. GENERATED FROM PYTHON SOURCE LINES 474-485

.. code-block:: default

    plt.figure(figsize=(4, 4))
    plt.title('Gradient Sizes of PCA-GM and VGG16 layers')
    plt.gca().set_xlabel('Layer Index')
    plt.gca().set_ylabel('Average Gradient Size')
    grad_size = []
    for param in model.parameters():
        if param.grad is not None:
            grad_size.append(paddle.abs(param.grad).mean().item())
    print(grad_size)
    plt.stem(grad_size)




.. image-sg:: /auto_examples/paddle/images/sphx_glr_plot_deep_image_matching_paddle_007.png
   :alt: Gradient Sizes of PCA-GM and VGG16 layers
   :srcset: /auto_examples/paddle/images/sphx_glr_plot_deep_image_matching_paddle_007.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [0.0001761753374012187, 0.005046362988650799, 0.00019799616711679846, 0.004505159333348274, 0.0002356240584049374, 0.008727227337658405, 9.035456059791613e-06, 3.708292206283659e-05, 0.00010498800111236051, 0.008671155199408531, 0.00012766255531460047, 0.004430870991200209, 0.0004881432105321437, 8.364503756297381e-09, 0.0009085583733394742, 0.0006325336871668696, 0.00016848553786985576, 1.3218246053270377e-08, 0.002069605514407158, 0.0011658399598672986, 0.00022546786931343377, 1.5380676732235088e-09, 0.0012994407443329692, 0.0010720733553171158, 0.00019767298363149166, 2.716070035546636e-09, 0.0018057669512927532, 0.0008526473538950086, 0.00018766395805869251, 7.116184863598107e-10, 0.0014612686354666948, 0.0010304542956873775, 0.00015724443073850125, 1.0380276638244368e-09, 0.0016077267937362194, 0.001095656305551529, 0.00016310851788148284, 1.288227746698567e-09, 0.0018223978113383055, 0.0008548579644411802, 0.00014119615661911666, 3.252666191944087e-10, 0.0015641562640666962, 0.0009410848142579198, 0.0001082986273104325, 4.6005579901198246e-10, 0.0017411774024367332, 0.0010586115531623363, 0.00010595271305646747, 0.0007398963207378983, 0.0014902877155691385, 0.000767977035138756, 7.936224574223161e-05, 1.8554069391996109e-10, 0.0013642293633893132, 0.000893241900485009, 7.795877172611654e-05, 0.0012501669116318226]

    <StemContainer object of 3 artists>



.. GENERATED FROM PYTHON SOURCE LINES 486-489

Update the model parameters. A deep learning pipeline should iterate the forward pass
and backward pass steps until convergence.


.. GENERATED FROM PYTHON SOURCE LINES 489-492

.. code-block:: default

    optim.step()
    optim.clear_grad()








.. GENERATED FROM PYTHON SOURCE LINES 493-496

.. note::
    This example supports both GPU and CPU, and the online documentation is built by a CPU-only machine.
    The efficiency will be significantly improved if you run this code on GPU.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  53.726 seconds)


.. _sphx_glr_download_auto_examples_paddle_plot_deep_image_matching_paddle.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_deep_image_matching_paddle.py <plot_deep_image_matching_paddle.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_deep_image_matching_paddle.ipynb <plot_deep_image_matching_paddle.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
