
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/2.seeded_graph_matching/plot_seed_graph_match_jittor.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_2.seeded_graph_matching_plot_seed_graph_match_jittor.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_2.seeded_graph_matching_plot_seed_graph_match_jittor.py:


=============================================
Jittor Backend Example: Seeded Graph Matching
=============================================

Seeded graph matching means some partial of the matching result is already known, and the known matching
results are called "seeds". In this example, we show how to exploit such prior with ``pygmtools``.

.. GENERATED FROM PYTHON SOURCE LINES 10-16

.. code-block:: default


    # Author: Runzhong Wang <runzhong.wang@sjtu.edu.cn>
    #         Qi Liu <purewhite@sjtu.edu.cn>
    #
    # License: Mulan PSL v2 License








.. GENERATED FROM PYTHON SOURCE LINES 18-33

.. note::
    How to perform seeded graph matching is still an open research problem. In this example, we show a
    simple yet effective approach that works with ``pygmtools``.

.. note::
    The following solvers are included in this example:

    * :func:`~pygmtools.classic_solvers.rrwm` (classic solver)

    * :func:`~pygmtools.classic_solvers.ipfp` (classic solver)

    * :func:`~pygmtools.classic_solvers.sm` (classic solver)

    * :func:`~pygmtools.neural_solvers.ngm` (neural network solver)


.. GENERATED FROM PYTHON SOURCE LINES 33-41

.. code-block:: default

    import jittor as jt # jittor backend
    import pygmtools as pygm
    import matplotlib.pyplot as plt # for plotting
    from matplotlib.patches import ConnectionPatch # for plotting matching result
    import networkx as nx # for plotting graphs
    pygm.set_backend('jittor') # set default backend for pygmtools
    _ = jt.set_seed(1) # fix random seed








.. GENERATED FROM PYTHON SOURCE LINES 42-47

Generate two isomorphic graphs (with seeds)
-------------------------------------------
In this example, we assume the first three nodes are already aligned. Firstly, we generate the seed matching
matrix:


.. GENERATED FROM PYTHON SOURCE LINES 47-52

.. code-block:: default

    num_nodes = 10
    num_seeds = 3
    seed_mat = jt.zeros((num_nodes, num_nodes))
    seed_mat[:num_seeds, :num_seeds] = jt.init.eye(num_seeds)








.. GENERATED FROM PYTHON SOURCE LINES 53-55

Then we generate the isomorphic graphs:


.. GENERATED FROM PYTHON SOURCE LINES 55-66

.. code-block:: default

    X_gt = seed_mat.clone()

    X_gt[jt.arange(num_seeds, num_nodes), jt.arange(num_seeds, num_nodes)[jt.randperm(num_nodes-num_seeds)]] = 1
    A1 = jt.rand(num_nodes, num_nodes)
    A1 = (A1 + A1.t() > 1.) * (A1 + A1.t()) / 2

    A1[jt.arange(A1.shape[0]), jt.arange(A1.shape[0])] = 0
    A2 = jt.matmul(jt.matmul(X_gt.t(), A1), X_gt)
    n1 = jt.Var([num_nodes])
    n2 = jt.Var([num_nodes])








.. GENERATED FROM PYTHON SOURCE LINES 67-71

Visualize the graphs and seeds
-------------------------------
The seed matching matrix:


.. GENERATED FROM PYTHON SOURCE LINES 71-75

.. code-block:: default

    plt.figure(figsize=(4, 4))
    plt.title('Seed Matching Matrix')
    plt.imshow(seed_mat.numpy(), cmap='Blues')




.. image-sg:: /auto_examples/2.seeded_graph_matching/images/sphx_glr_plot_seed_graph_match_jittor_001.png
   :alt: Seed Matching Matrix
   :srcset: /auto_examples/2.seeded_graph_matching/images/sphx_glr_plot_seed_graph_match_jittor_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.image.AxesImage object at 0x7fda50d6abf0>



.. GENERATED FROM PYTHON SOURCE LINES 76-78

The blue lines denote the matching seeds.


.. GENERATED FROM PYTHON SOURCE LINES 78-95

.. code-block:: default

    plt.figure(figsize=(8, 4))
    G1 = nx.from_numpy_array(A1.numpy())
    G2 = nx.from_numpy_array(A2.numpy())
    pos1 = nx.spring_layout(G1)
    pos2 = nx.spring_layout(G2)
    ax1 = plt.subplot(1, 2, 1)
    plt.title('Graph 1')
    nx.draw_networkx(G1, pos=pos1)
    ax2 = plt.subplot(1, 2, 2)
    plt.title('Graph 2')
    nx.draw_networkx(G2, pos=pos2)
    for i in range(num_seeds):
        j = jt.argmax(seed_mat[i], dim=-1)[0].item()
        con = ConnectionPatch(xyA=pos1[i], xyB=pos2[j], coordsA="data", coordsB="data",
                              axesA=ax1, axesB=ax2, color="blue")
        plt.gca().add_artist(con)




.. image-sg:: /auto_examples/2.seeded_graph_matching/images/sphx_glr_plot_seed_graph_match_jittor_002.png
   :alt: Graph 1, Graph 2
   :srcset: /auto_examples/2.seeded_graph_matching/images/sphx_glr_plot_seed_graph_match_jittor_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 96-111

Now these two graphs look dissimilar because they are not aligned. We then align these two graphs
by graph matching.

Build affinity matrix with seed prior
--------------------------------------
We follow the formulation of Quadratic Assignment Problem (QAP):

.. math::

    &\max_{\mathbf{X}} \ \texttt{vec}(\mathbf{X})^\top \mathbf{K} \texttt{vec}(\mathbf{X})\\
    s.t. \quad &\mathbf{X} \in \{0, 1\}^{n_1\times n_2}, \ \mathbf{X}\mathbf{1} = \mathbf{1}, \ \mathbf{X}^\top\mathbf{1} \leq \mathbf{1}

where the first step is to build the affinity matrix (:math:`\mathbf{K}`). We firstly build a "standard"
affinity matrix:


.. GENERATED FROM PYTHON SOURCE LINES 111-117

.. code-block:: default

    conn1, edge1 = pygm.utils.dense_to_sparse(A1)
    conn2, edge2 = pygm.utils.dense_to_sparse(A2)
    import functools
    gaussian_aff = functools.partial(pygm.utils.gaussian_aff_fn, sigma=.1) # set affinity function
    K = pygm.utils.build_aff_mat(None, edge1, conn1, None, edge2, conn2, n1, None, n2, None, edge_aff_fn=gaussian_aff)








.. GENERATED FROM PYTHON SOURCE LINES 118-127

The next step is to add the seed matching information as priors to the affinity matrix. The matching priors
are treated as node affinities and the corresponding node affinity is added by 10 if there is an matching
prior.

.. note::
    The node affinity matrix is transposed because in the graph matching formulation followed by ``pygmtools``,
    :math:`\texttt{vec}(\mathbf{X})` means column vectorization. The node affinity should also be column-
    vectorized.


.. GENERATED FROM PYTHON SOURCE LINES 127-129

.. code-block:: default

    K += jt.diag(seed_mat.t().reshape(-1) * 10)








.. GENERATED FROM PYTHON SOURCE LINES 130-135

Visualization of the affinity matrix.

.. note::
    In this example, the diagonal elements reflect the matching prior.


.. GENERATED FROM PYTHON SOURCE LINES 135-139

.. code-block:: default

    plt.figure(figsize=(4, 4))
    plt.title(f'Affinity Matrix (size: {K.shape[0]}$\\times${K.shape[1]})')
    plt.imshow(K.numpy(), cmap='Blues')




.. image-sg:: /auto_examples/2.seeded_graph_matching/images/sphx_glr_plot_seed_graph_match_jittor_003.png
   :alt: Affinity Matrix (size: 100$\times$100)
   :srcset: /auto_examples/2.seeded_graph_matching/images/sphx_glr_plot_seed_graph_match_jittor_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.image.AxesImage object at 0x7fd947d39db0>



.. GENERATED FROM PYTHON SOURCE LINES 140-144

Solve graph matching problem by RRWM solver
-------------------------------------------
See :func:`~pygmtools.classic_solvers.rrwm` for the API reference.


.. GENERATED FROM PYTHON SOURCE LINES 144-146

.. code-block:: default

    X = pygm.rrwm(K, n1, n2)








.. GENERATED FROM PYTHON SOURCE LINES 147-149

The output of RRWM is a soft matching matrix. The matching prior is well-preserved:


.. GENERATED FROM PYTHON SOURCE LINES 149-157

.. code-block:: default

    plt.figure(figsize=(8, 4))
    plt.subplot(1, 2, 1)
    plt.title('RRWM Soft Matching Matrix')
    plt.imshow(X.numpy(), cmap='Blues')
    plt.subplot(1, 2, 2)
    plt.title('Ground Truth Matching Matrix')
    plt.imshow(X_gt.numpy(), cmap='Blues')




.. image-sg:: /auto_examples/2.seeded_graph_matching/images/sphx_glr_plot_seed_graph_match_jittor_004.png
   :alt: RRWM Soft Matching Matrix, Ground Truth Matching Matrix
   :srcset: /auto_examples/2.seeded_graph_matching/images/sphx_glr_plot_seed_graph_match_jittor_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.image.AxesImage object at 0x7fd94c637c70>



.. GENERATED FROM PYTHON SOURCE LINES 158-162

Get the discrete matching matrix
---------------------------------
Hungarian algorithm is then adopted to reach a discrete matching matrix


.. GENERATED FROM PYTHON SOURCE LINES 162-164

.. code-block:: default

    X = pygm.hungarian(X)








.. GENERATED FROM PYTHON SOURCE LINES 165-167

Visualization of the discrete matching matrix:


.. GENERATED FROM PYTHON SOURCE LINES 167-175

.. code-block:: default

    plt.figure(figsize=(8, 4))
    plt.subplot(1, 2, 1)
    plt.title(f'RRWM Matching Matrix (acc={(X * X_gt).sum()/ X_gt.sum():.2f})')
    plt.imshow(X.numpy(), cmap='Blues')
    plt.subplot(1, 2, 2)
    plt.title('Ground Truth Matching Matrix')
    plt.imshow(X_gt.numpy(), cmap='Blues')




.. image-sg:: /auto_examples/2.seeded_graph_matching/images/sphx_glr_plot_seed_graph_match_jittor_005.png
   :alt: RRWM Matching Matrix (acc=1.00), Ground Truth Matching Matrix
   :srcset: /auto_examples/2.seeded_graph_matching/images/sphx_glr_plot_seed_graph_match_jittor_005.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.image.AxesImage object at 0x7fd94c72ce80>



.. GENERATED FROM PYTHON SOURCE LINES 176-181

Align the original graphs
--------------------------
Draw the matching (green lines for correct matching, red lines for wrong matching, blue lines for
seed matching):


.. GENERATED FROM PYTHON SOURCE LINES 181-200

.. code-block:: default

    plt.figure(figsize=(8, 4))
    ax1 = plt.subplot(1, 2, 1)
    plt.title('Graph 1')
    nx.draw_networkx(G1, pos=pos1)
    ax2 = plt.subplot(1, 2, 2)
    plt.title('Graph 2')
    nx.draw_networkx(G2, pos=pos2)
    for i in range(num_nodes):
        j = jt.argmax(X[i], dim=-1)[0].item()
        if seed_mat[i, j] == 1:
            line_color = "blue"
        elif X_gt[i, j] == 1:
            line_color = "green"
        else:
            line_color = "red"
        con = ConnectionPatch(xyA=pos1[i], xyB=pos2[j], coordsA="data", coordsB="data",
                              axesA=ax1, axesB=ax2, color=line_color)
        plt.gca().add_artist(con)




.. image-sg:: /auto_examples/2.seeded_graph_matching/images/sphx_glr_plot_seed_graph_match_jittor_006.png
   :alt: Graph 1, Graph 2
   :srcset: /auto_examples/2.seeded_graph_matching/images/sphx_glr_plot_seed_graph_match_jittor_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 201-203

Align the nodes:


.. GENERATED FROM PYTHON SOURCE LINES 203-225

.. code-block:: default

    align_A2 = jt.matmul(jt.matmul(X, A2), X.t())
    plt.figure(figsize=(8, 4))
    ax1 = plt.subplot(1, 2, 1)
    plt.title('Graph 1')
    nx.draw_networkx(G1, pos=pos1)
    ax2 = plt.subplot(1, 2, 2)
    plt.title('Aligned Graph 2')
    align_pos2 = {}
    for i in range(num_nodes):
        j = jt.argmax(X[i], dim=-1)[0].item()
        align_pos2[j] = pos1[i]
        if seed_mat[i, j] == 1:
            line_color = "blue"
        elif X_gt[i, j] == 1:
            line_color = "green"
        else:
            line_color = "red"
        con = ConnectionPatch(xyA=pos1[i], xyB=align_pos2[j], coordsA="data", coordsB="data",
                              axesA=ax1, axesB=ax2, color=line_color)
        plt.gca().add_artist(con)
    nx.draw_networkx(G2, pos=align_pos2)




.. image-sg:: /auto_examples/2.seeded_graph_matching/images/sphx_glr_plot_seed_graph_match_jittor_007.png
   :alt: Graph 1, Aligned Graph 2
   :srcset: /auto_examples/2.seeded_graph_matching/images/sphx_glr_plot_seed_graph_match_jittor_007.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 226-235

Other solvers are also available
---------------------------------
Only the affinity matrix is modified to encode matching priors. Thus, other graph matching solvers are also
available to handle this seeded graph matching setting.

Classic IPFP solver
^^^^^^^^^^^^^^^^^^^^^
See :func:`~pygmtools.classic_solvers.ipfp` for the API reference.


.. GENERATED FROM PYTHON SOURCE LINES 235-237

.. code-block:: default

    X = pygm.ipfp(K, n1, n2)








.. GENERATED FROM PYTHON SOURCE LINES 238-240

Visualization of IPFP matching result:


.. GENERATED FROM PYTHON SOURCE LINES 240-248

.. code-block:: default

    plt.figure(figsize=(8, 4))
    plt.subplot(1, 2, 1)
    plt.title(f'IPFP Matching Matrix (acc={(X * X_gt).sum()/ X_gt.sum():.2f})')
    plt.imshow(X.numpy(), cmap='Blues')
    plt.subplot(1, 2, 2)
    plt.title('Ground Truth Matching Matrix')
    plt.imshow(X_gt.numpy(), cmap='Blues')




.. image-sg:: /auto_examples/2.seeded_graph_matching/images/sphx_glr_plot_seed_graph_match_jittor_008.png
   :alt: IPFP Matching Matrix (acc=1.00), Ground Truth Matching Matrix
   :srcset: /auto_examples/2.seeded_graph_matching/images/sphx_glr_plot_seed_graph_match_jittor_008.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.image.AxesImage object at 0x7fda2c0f6080>



.. GENERATED FROM PYTHON SOURCE LINES 249-253

Classic SM solver
^^^^^^^^^^^^^^^^^^^^^
See :func:`~pygmtools.classic_solvers.sm` for the API reference.


.. GENERATED FROM PYTHON SOURCE LINES 253-256

.. code-block:: default

    X = pygm.sm(K, n1, n2)
    X = pygm.hungarian(X)








.. GENERATED FROM PYTHON SOURCE LINES 257-259

Visualization of SM matching result:


.. GENERATED FROM PYTHON SOURCE LINES 259-267

.. code-block:: default

    plt.figure(figsize=(8, 4))
    plt.subplot(1, 2, 1)
    plt.title(f'SM Matching Matrix (acc={(X * X_gt).sum()/ X_gt.sum():.2f})')
    plt.imshow(X.numpy(), cmap='Blues')
    plt.subplot(1, 2, 2)
    plt.title('Ground Truth Matching Matrix')
    plt.imshow(X_gt.numpy(), cmap='Blues')




.. image-sg:: /auto_examples/2.seeded_graph_matching/images/sphx_glr_plot_seed_graph_match_jittor_009.png
   :alt: SM Matching Matrix (acc=1.00), Ground Truth Matching Matrix
   :srcset: /auto_examples/2.seeded_graph_matching/images/sphx_glr_plot_seed_graph_match_jittor_009.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.image.AxesImage object at 0x7fda3c98c250>



.. GENERATED FROM PYTHON SOURCE LINES 268-272

NGM neural network solver
^^^^^^^^^^^^^^^^^^^^^^^^^
See :func:`~pygmtools.neural_solvers.ngm` for the API reference.


.. GENERATED FROM PYTHON SOURCE LINES 272-276

.. code-block:: default

    with jt.no_grad():
        X = pygm.ngm(K, n1, n2, pretrain='voc')
        X = pygm.hungarian(X)








.. GENERATED FROM PYTHON SOURCE LINES 277-279

Visualization of NGM matching result:


.. GENERATED FROM PYTHON SOURCE LINES 279-285

.. code-block:: default

    plt.figure(figsize=(8, 4))
    plt.subplot(1, 2, 1)
    plt.title(f'NGM Matching Matrix (acc={(X * X_gt).sum()/ X_gt.sum():.2f})')
    plt.imshow(X.numpy(), cmap='Blues')
    plt.subplot(1, 2, 2)
    plt.title('Ground Truth Matching Matrix')
    plt.imshow(X_gt.numpy(), cmap='Blues')


.. image-sg:: /auto_examples/2.seeded_graph_matching/images/sphx_glr_plot_seed_graph_match_jittor_010.png
   :alt: NGM Matching Matrix (acc=1.00), Ground Truth Matching Matrix
   :srcset: /auto_examples/2.seeded_graph_matching/images/sphx_glr_plot_seed_graph_match_jittor_010.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.image.AxesImage object at 0x7fda3c840790>




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.720 seconds)


.. _sphx_glr_download_auto_examples_2.seeded_graph_matching_plot_seed_graph_match_jittor.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_seed_graph_match_jittor.py <plot_seed_graph_match_jittor.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_seed_graph_match_jittor.ipynb <plot_seed_graph_match_jittor.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
