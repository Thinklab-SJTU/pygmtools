
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/pytorch/plot_image_matching.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_pytorch_plot_image_matching.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_pytorch_plot_image_matching.py:


========================================
Matching Image Keypoints by QAP Solvers
========================================

This example shows how to match image keypoints by graph matching solvers provided by ``pygmtools``.
These solvers follow the Quadratic Assignment Problem formulation and can generally work out-of-box.
The matched images can be further processed for other downstream tasks.

.. GENERATED FROM PYTHON SOURCE LINES 11-16

.. code-block:: default


    # Author: Runzhong Wang <runzhong.wang@sjtu.edu.cn>
    #
    # License: Mulan PSL v2 License








.. GENERATED FROM PYTHON SOURCE LINES 18-29

.. note::
    The following solvers support QAP formulation, and are included in this example:

    * :func:`~pygmtools.classic_solvers.rrwm` (classic solver)

    * :func:`~pygmtools.classic_solvers.ipfp` (classic solver)

    * :func:`~pygmtools.classic_solvers.sm` (classic solver)

    * :func:`~pygmtools.neural_solvers.ngm` (neural network solver)


.. GENERATED FROM PYTHON SOURCE LINES 29-42

.. code-block:: default

    import torch # pytorch backend
    import torchvision # CV models
    import pygmtools as pygm
    import matplotlib.pyplot as plt # for plotting
    from matplotlib.patches import ConnectionPatch # for plotting matching result
    import scipy.io as sio # for loading .mat file
    import scipy.spatial as spa # for Delaunay triangulation
    from sklearn.decomposition import PCA as PCAdimReduc
    import itertools
    import numpy as np
    from PIL import Image
    pygm.BACKEND = 'pytorch' # set default backend for pygmtools








.. GENERATED FROM PYTHON SOURCE LINES 43-50

Load the images
----------------
Images are from the Willow Object Class dataset (this dataset also available with the Benchmark of ``pygmtools``,
see :class:`~pygmtools.dataset.WillowObject`).

The images are resized to 256x256.


.. GENERATED FROM PYTHON SOURCE LINES 50-62

.. code-block:: default

    obj_resize = (256, 256)
    img1 = Image.open('../data/willow_duck_0001.png')
    img2 = Image.open('../data/willow_duck_0002.png')
    kpts1 = torch.tensor(sio.loadmat('../data/willow_duck_0001.mat')['pts_coord'])
    kpts2 = torch.tensor(sio.loadmat('../data/willow_duck_0002.mat')['pts_coord'])
    kpts1[0] = kpts1[0] * obj_resize[0] / img1.size[0]
    kpts1[1] = kpts1[1] * obj_resize[1] / img1.size[1]
    kpts2[0] = kpts2[0] * obj_resize[0] / img2.size[0]
    kpts2[1] = kpts2[1] * obj_resize[1] / img2.size[1]
    img1 = img1.resize(obj_resize, resample=Image.BILINEAR)
    img2 = img2.resize(obj_resize, resample=Image.BILINEAR)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /mnt/c/Users/liber/OneDrive/Documents/2022/pygmtools/examples/pytorch/plot_image_matching.py:59: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
      img1 = img1.resize(obj_resize, resample=Image.BILINEAR)
    /mnt/c/Users/liber/OneDrive/Documents/2022/pygmtools/examples/pytorch/plot_image_matching.py:60: DeprecationWarning: BILINEAR is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.BILINEAR instead.
      img2 = img2.resize(obj_resize, resample=Image.BILINEAR)




.. GENERATED FROM PYTHON SOURCE LINES 63-65

Visualize the images and keypoints


.. GENERATED FROM PYTHON SOURCE LINES 65-80

.. code-block:: default

    def plot_image_with_graph(img, kpt, A=None):
        plt.imshow(img)
        plt.scatter(kpt[0], kpt[1], c='w', edgecolors='k')
        if A is not None:
            for idx in torch.nonzero(A, as_tuple=False):
                plt.plot((kpt[0, idx[0]], kpt[0, idx[1]]), (kpt[1, idx[0]], kpt[1, idx[1]]), 'k-')

    plt.figure(figsize=(8, 4))
    plt.subplot(1, 2, 1)
    plt.title('Image 1')
    plot_image_with_graph(img1, kpts1)
    plt.subplot(1, 2, 2)
    plt.title('Image 2')
    plot_image_with_graph(img2, kpts2)




.. image-sg:: /auto_examples/pytorch/images/sphx_glr_plot_image_matching_001.png
   :alt: Image 1, Image 2
   :srcset: /auto_examples/pytorch/images/sphx_glr_plot_image_matching_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 81-86

Build the graphs
-----------------
Graph structures are built based on the geometric structure of the keypoint set. In this example,
we refer to `Delaunay triangulation <https://en.wikipedia.org/wiki/Delaunay_triangulation>`_.


.. GENERATED FROM PYTHON SOURCE LINES 86-97

.. code-block:: default

    def delaunay_triangulation(kpt):
        d = spa.Delaunay(kpt.numpy().transpose())
        A = torch.zeros(len(kpt[0]), len(kpt[0]))
        for simplex in d.simplices:
            for pair in itertools.permutations(simplex, 2):
                A[pair] = 1
        return A

    A1 = delaunay_triangulation(kpts1)
    A2 = delaunay_triangulation(kpts2)








.. GENERATED FROM PYTHON SOURCE LINES 98-100

We encode the length of edges as edge features


.. GENERATED FROM PYTHON SOURCE LINES 100-105

.. code-block:: default

    A1 = ((kpts1.unsqueeze(1) - kpts1.unsqueeze(2)) ** 2).sum(dim=0) * A1
    A1 = (A1 / A1.max()).to(dtype=torch.float32)
    A2 = ((kpts2.unsqueeze(1) - kpts2.unsqueeze(2)) ** 2).sum(dim=0) * A2
    A2 = (A2 / A2.max()).to(dtype=torch.float32)








.. GENERATED FROM PYTHON SOURCE LINES 106-108

Visualize the graphs


.. GENERATED FROM PYTHON SOURCE LINES 108-116

.. code-block:: default

    plt.figure(figsize=(8, 4))
    plt.subplot(1, 2, 1)
    plt.title('Image 1 with Graphs')
    plot_image_with_graph(img1, kpts1, A1)
    plt.subplot(1, 2, 2)
    plt.title('Image 2 with Graphs')
    plot_image_with_graph(img2, kpts2, A2)




.. image-sg:: /auto_examples/pytorch/images/sphx_glr_plot_image_matching_002.png
   :alt: Image 1 with Graphs, Image 2 with Graphs
   :srcset: /auto_examples/pytorch/images/sphx_glr_plot_image_matching_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 117-121

Extract node features
----------------------
Let's adopt the VGG16 CNN model to extract node features.


.. GENERATED FROM PYTHON SOURCE LINES 121-128

.. code-block:: default

    vgg16_cnn = torchvision.models.vgg16_bn(True)
    torch_img1 = torch.from_numpy(np.array(img1, dtype=np.float32) / 256).permute(2, 0, 1).unsqueeze(0) # shape: BxCxHxW
    torch_img2 = torch.from_numpy(np.array(img2, dtype=np.float32) / 256).permute(2, 0, 1).unsqueeze(0) # shape: BxCxHxW
    with torch.set_grad_enabled(False):
        feat1 = vgg16_cnn.features(torch_img1)
        feat2 = vgg16_cnn.features(torch_img2)








.. GENERATED FROM PYTHON SOURCE LINES 129-131

Normalize the features


.. GENERATED FROM PYTHON SOURCE LINES 131-139

.. code-block:: default

    num_features = feat1.shape[1]
    def l2norm(node_feat):
        return torch.nn.functional.local_response_norm(
            node_feat, node_feat.shape[1] * 2, alpha=node_feat.shape[1] * 2, beta=0.5, k=0)

    feat1 = l2norm(feat1)
    feat2 = l2norm(feat2)








.. GENERATED FROM PYTHON SOURCE LINES 140-142

Up-sample the features to the original image size


.. GENERATED FROM PYTHON SOURCE LINES 142-145

.. code-block:: default

    feat1_upsample = torch.nn.functional.interpolate(feat1, obj_resize, mode='bilinear')
    feat2_upsample = torch.nn.functional.interpolate(feat2, obj_resize, mode='bilinear')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/roger/.local/lib/python3.8/site-packages/torch/nn/functional.py:3631: UserWarning: Default upsampling behavior when mode=bilinear is changed to align_corners=False since 0.4.0. Please specify align_corners=True if the old behavior is desired. See the documentation of nn.Upsample for details.
      warnings.warn(




.. GENERATED FROM PYTHON SOURCE LINES 146-148

Visualize the extracted CNN feature (dimensionality reduction via principle component analysis)


.. GENERATED FROM PYTHON SOURCE LINES 148-169

.. code-block:: default

    pca_dim_reduc = PCAdimReduc(n_components=3, whiten=True)
    feat_dim_reduc = pca_dim_reduc.fit_transform(
        np.concatenate((
            feat1_upsample.permute(0, 2, 3, 1).reshape(-1, num_features).numpy(),
            feat2_upsample.permute(0, 2, 3, 1).reshape(-1, num_features).numpy()
        ), axis=0)
    )
    feat_dim_reduc = feat_dim_reduc / np.max(np.abs(feat_dim_reduc), axis=0, keepdims=True) / 2 + 0.5
    feat1_dim_reduc = feat_dim_reduc[:obj_resize[0] * obj_resize[1], :]
    feat2_dim_reduc = feat_dim_reduc[obj_resize[0] * obj_resize[1]:, :]

    plt.figure(figsize=(8, 4))
    plt.subplot(1, 2, 1)
    plt.title('Image 1 with CNN features')
    plot_image_with_graph(img1, kpts1, A1)
    plt.imshow(feat1_dim_reduc.reshape(obj_resize[0], obj_resize[1], 3), alpha=0.5)
    plt.subplot(1, 2, 2)
    plt.title('Image 2 with CNN features')
    plot_image_with_graph(img2, kpts2, A2)
    plt.imshow(feat2_dim_reduc.reshape(obj_resize[0], obj_resize[1], 3), alpha=0.5)




.. image-sg:: /auto_examples/pytorch/images/sphx_glr_plot_image_matching_003.png
   :alt: Image 1 with CNN features, Image 2 with CNN features
   :srcset: /auto_examples/pytorch/images/sphx_glr_plot_image_matching_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.image.AxesImage object at 0x7fa3941a74f0>



.. GENERATED FROM PYTHON SOURCE LINES 170-172

Extract node features by nearest interpolation


.. GENERATED FROM PYTHON SOURCE LINES 172-177

.. code-block:: default

    rounded_kpts1 = torch.round(kpts1).to(dtype=torch.long)
    rounded_kpts2 = torch.round(kpts2).to(dtype=torch.long)
    node1 = feat1_upsample[0, :, rounded_kpts1[1], rounded_kpts1[0]].t() # shape: NxC
    node2 = feat2_upsample[0, :, rounded_kpts2[1], rounded_kpts2[0]].t() # shape: NxC








.. GENERATED FROM PYTHON SOURCE LINES 178-189

Build affinity matrix
----------------------
We follow the formulation of Quadratic Assignment Problem (QAP):

.. math::

    &\max_{\mathbf{X}} \ \texttt{vec}(\mathbf{X})^\top \mathbf{K} \texttt{vec}(\mathbf{X})\\
    s.t. \quad &\mathbf{X} \in \{0, 1\}^{n_1\times n_2}, \ \mathbf{X}\mathbf{1} = \mathbf{1}, \ \mathbf{X}^\top\mathbf{1} \leq \mathbf{1}

where the first step is to build the affinity matrix (:math:`\mathbf{K}`)


.. GENERATED FROM PYTHON SOURCE LINES 189-195

.. code-block:: default

    conn1, edge1 = pygm.utils.dense_to_sparse(A1)
    conn2, edge2 = pygm.utils.dense_to_sparse(A2)
    import functools
    gaussian_aff = functools.partial(pygm.utils.gaussian_aff_fn, sigma=1) # set affinity function
    K = pygm.utils.build_aff_mat(node1, edge1, conn1, node2, edge2, conn2, edge_aff_fn=gaussian_aff)








.. GENERATED FROM PYTHON SOURCE LINES 196-202

Visualization of the affinity matrix. For graph matching problem with :math:`N` nodes, the affinity matrix
has :math:`N^2\times N^2` elements because there are :math:`N^2` edges in each graph.

.. note::
    The diagonal elements are node affinities, the off-diagonal elements are edge features.


.. GENERATED FROM PYTHON SOURCE LINES 202-206

.. code-block:: default

    plt.figure(figsize=(4, 4))
    plt.title(f'Affinity Matrix (size: {K.shape[0]}$\\times${K.shape[1]})')
    plt.imshow(K.numpy(), cmap='Blues')




.. image-sg:: /auto_examples/pytorch/images/sphx_glr_plot_image_matching_004.png
   :alt: Affinity Matrix (size: 100$\times$100)
   :srcset: /auto_examples/pytorch/images/sphx_glr_plot_image_matching_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.image.AxesImage object at 0x7fa37804dd60>



.. GENERATED FROM PYTHON SOURCE LINES 207-211

Solve graph matching problem by RRWM solver
-------------------------------------------
See :func:`~pygmtools.classic_solvers.rrwm` for the API reference.


.. GENERATED FROM PYTHON SOURCE LINES 211-213

.. code-block:: default

    X = pygm.rrwm(K, kpts1.shape[1], kpts2.shape[1])








.. GENERATED FROM PYTHON SOURCE LINES 214-216

The output of RRWM is a soft matching matrix. Hungarian algorithm is then adopted to reach a discrete matching matrix


.. GENERATED FROM PYTHON SOURCE LINES 216-218

.. code-block:: default

    X = pygm.hungarian(X)








.. GENERATED FROM PYTHON SOURCE LINES 219-224

Plot the matching
------------------
The correct matchings are marked by green, and wrong matchings are marked by red. In this example, the nodes are
ordered by their ground truth classes (i.e. the ground truth matching matrix is a diagonal matrix).


.. GENERATED FROM PYTHON SOURCE LINES 224-236

.. code-block:: default

    plt.figure(figsize=(8, 4))
    plt.suptitle('Image Matching Result by RRWM')
    ax1 = plt.subplot(1, 2, 1)
    plot_image_with_graph(img1, kpts1, A1)
    ax2 = plt.subplot(1, 2, 2)
    plot_image_with_graph(img2, kpts2, A2)
    for i in range(X.shape[0]):
        j = torch.argmax(X[i]).item()
        con = ConnectionPatch(xyA=kpts1[:, i], xyB=kpts2[:, j], coordsA="data", coordsB="data",
                              axesA=ax1, axesB=ax2, color="red" if i != j else "green")
        plt.gca().add_artist(con)




.. image-sg:: /auto_examples/pytorch/images/sphx_glr_plot_image_matching_005.png
   :alt: Image Matching Result by RRWM
   :srcset: /auto_examples/pytorch/images/sphx_glr_plot_image_matching_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 237-245

Solve by other solvers
-----------------------
We could also do a quick benchmarking of other solvers on this specific problem.

IPFP solver
^^^^^^^^^^^
See :func:`~pygmtools.classic_solvers.ipfp` for the API reference.


.. GENERATED FROM PYTHON SOURCE LINES 245-259

.. code-block:: default

    X = pygm.ipfp(K, kpts1.shape[1], kpts2.shape[1])

    plt.figure(figsize=(8, 4))
    plt.suptitle('Image Matching Result by IPFP')
    ax1 = plt.subplot(1, 2, 1)
    plot_image_with_graph(img1, kpts1, A1)
    ax2 = plt.subplot(1, 2, 2)
    plot_image_with_graph(img2, kpts2, A2)
    for i in range(X.shape[0]):
        j = torch.argmax(X[i]).item()
        con = ConnectionPatch(xyA=kpts1[:, i], xyB=kpts2[:, j], coordsA="data", coordsB="data",
                              axesA=ax1, axesB=ax2, color="red" if i != j else "green")
        plt.gca().add_artist(con)




.. image-sg:: /auto_examples/pytorch/images/sphx_glr_plot_image_matching_006.png
   :alt: Image Matching Result by IPFP
   :srcset: /auto_examples/pytorch/images/sphx_glr_plot_image_matching_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 260-264

SM solver
^^^^^^^^^^^
See :func:`~pygmtools.classic_solvers.sm` for the API reference.


.. GENERATED FROM PYTHON SOURCE LINES 264-279

.. code-block:: default

    X = pygm.sm(K, kpts1.shape[1], kpts2.shape[1])
    X = pygm.hungarian(X)

    plt.figure(figsize=(8, 4))
    plt.suptitle('Image Matching Result by SM')
    ax1 = plt.subplot(1, 2, 1)
    plot_image_with_graph(img1, kpts1, A1)
    ax2 = plt.subplot(1, 2, 2)
    plot_image_with_graph(img2, kpts2, A2)
    for i in range(X.shape[0]):
        j = torch.argmax(X[i]).item()
        con = ConnectionPatch(xyA=kpts1[:, i], xyB=kpts2[:, j], coordsA="data", coordsB="data",
                              axesA=ax1, axesB=ax2, color="red" if i != j else "green")
        plt.gca().add_artist(con)




.. image-sg:: /auto_examples/pytorch/images/sphx_glr_plot_image_matching_007.png
   :alt: Image Matching Result by SM
   :srcset: /auto_examples/pytorch/images/sphx_glr_plot_image_matching_007.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 280-291

NGM solver
^^^^^^^^^^^
See :func:`~pygmtools.neural_solvers.ngm` for the API reference.

.. note::
    The NGM solvers are pretrained on a different problem setting, so their performance may seem inferior.
    To improve their performance, you may change the way of building affinity matrices, or try finetuning
    NGM on the new problem.

The NGM solver pretrained on Willow dataset:


.. GENERATED FROM PYTHON SOURCE LINES 291-306

.. code-block:: default

    X = pygm.ngm(K, kpts1.shape[1], kpts2.shape[1], pretrain='willow')
    X = pygm.hungarian(X)

    plt.figure(figsize=(8, 4))
    plt.suptitle('Image Matching Result by NGM (willow pretrain)')
    ax1 = plt.subplot(1, 2, 1)
    plot_image_with_graph(img1, kpts1, A1)
    ax2 = plt.subplot(1, 2, 2)
    plot_image_with_graph(img2, kpts2, A2)
    for i in range(X.shape[0]):
        j = torch.argmax(X[i]).item()
        con = ConnectionPatch(xyA=kpts1[:, i], xyB=kpts2[:, j], coordsA="data", coordsB="data",
                              axesA=ax1, axesB=ax2, color="red" if i != j else "green")
        plt.gca().add_artist(con)




.. image-sg:: /auto_examples/pytorch/images/sphx_glr_plot_image_matching_008.png
   :alt: Image Matching Result by NGM (willow pretrain)
   :srcset: /auto_examples/pytorch/images/sphx_glr_plot_image_matching_008.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 307-309

The NGM solver pretrained on VOC dataset:


.. GENERATED FROM PYTHON SOURCE LINES 309-323

.. code-block:: default

    X = pygm.ngm(K, kpts1.shape[1], kpts2.shape[1], pretrain='voc')
    X = pygm.hungarian(X)

    plt.figure(figsize=(8, 4))
    plt.suptitle('Image Matching Result by NGM (voc pretrain)')
    ax1 = plt.subplot(1, 2, 1)
    plot_image_with_graph(img1, kpts1, A1)
    ax2 = plt.subplot(1, 2, 2)
    plot_image_with_graph(img2, kpts2, A2)
    for i in range(X.shape[0]):
        j = torch.argmax(X[i]).item()
        con = ConnectionPatch(xyA=kpts1[:, i], xyB=kpts2[:, j], coordsA="data", coordsB="data",
                              axesA=ax1, axesB=ax2, color="red" if i != j else "green")
        plt.gca().add_artist(con)



.. image-sg:: /auto_examples/pytorch/images/sphx_glr_plot_image_matching_009.png
   :alt: Image Matching Result by NGM (voc pretrain)
   :srcset: /auto_examples/pytorch/images/sphx_glr_plot_image_matching_009.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  58.915 seconds)


.. _sphx_glr_download_auto_examples_pytorch_plot_image_matching.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_image_matching.py <plot_image_matching.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_image_matching.ipynb <plot_image_matching.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
